/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
  } from "ethers";
  import type {
    FunctionFragment,
    Result,
    EventFragment,
  } from "@ethersproject/abi";
  import type { Listener, Provider } from "@ethersproject/providers";
  import type {
    TypedEventFilter,
    TypedEvent,
    TypedListener,
    OnEvent,
    PromiseOrValue,
  } from "../common";
  
  export interface NftVaultControllerInterface extends utils.Interface {
    functions: {
      "NftVaultAddress(uint96)": FunctionFragment;
      "NftVaultId(address)": FunctionFragment;
      "_CollateralToken_underlying(address)": FunctionFragment;
      "_nfpManager()": FunctionFragment;
      "_nftVaultAddress_vaultId(address)": FunctionFragment;
      "_underlying_CollateralToken(address)": FunctionFragment;
      "_vaultAddress_vaultId(address)": FunctionFragment;
      "_vaultController()": FunctionFragment;
      "_vaultId_nftVaultAddress(uint96)": FunctionFragment;
      "initialize(address)": FunctionFragment;
      "mintVault(uint96)": FunctionFragment;
      "owner()": FunctionFragment;
      "registerUnderlying(address,address)": FunctionFragment;
      "renounceOwnership()": FunctionFragment;
      "retrieveUnderlying(uint256,address,address)": FunctionFragment;
      "transferOwnership(address)": FunctionFragment;
      "vaultId(address)": FunctionFragment;
    };
  
    getFunction(
      nameOrSignatureOrTopic:
        | "NftVaultAddress"
        | "NftVaultAddress(uint96)"
        | "NftVaultId"
        | "NftVaultId(address)"
        | "_CollateralToken_underlying"
        | "_CollateralToken_underlying(address)"
        | "_nfpManager"
        | "_nfpManager()"
        | "_nftVaultAddress_vaultId"
        | "_nftVaultAddress_vaultId(address)"
        | "_underlying_CollateralToken"
        | "_underlying_CollateralToken(address)"
        | "_vaultAddress_vaultId"
        | "_vaultAddress_vaultId(address)"
        | "_vaultController"
        | "_vaultController()"
        | "_vaultId_nftVaultAddress"
        | "_vaultId_nftVaultAddress(uint96)"
        | "initialize"
        | "initialize(address)"
        | "mintVault"
        | "mintVault(uint96)"
        | "owner"
        | "owner()"
        | "registerUnderlying"
        | "registerUnderlying(address,address)"
        | "renounceOwnership"
        | "renounceOwnership()"
        | "retrieveUnderlying"
        | "retrieveUnderlying(uint256,address,address)"
        | "transferOwnership"
        | "transferOwnership(address)"
        | "vaultId"
        | "vaultId(address)"
    ): FunctionFragment;
  
    encodeFunctionData(
      functionFragment: "NftVaultAddress",
      values: [PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
      functionFragment: "NftVaultAddress(uint96)",
      values: [PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
      functionFragment: "NftVaultId",
      values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
      functionFragment: "NftVaultId(address)",
      values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
      functionFragment: "_CollateralToken_underlying",
      values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
      functionFragment: "_CollateralToken_underlying(address)",
      values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
      functionFragment: "_nfpManager",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "_nfpManager()",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "_nftVaultAddress_vaultId",
      values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
      functionFragment: "_nftVaultAddress_vaultId(address)",
      values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
      functionFragment: "_underlying_CollateralToken",
      values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
      functionFragment: "_underlying_CollateralToken(address)",
      values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
      functionFragment: "_vaultAddress_vaultId",
      values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
      functionFragment: "_vaultAddress_vaultId(address)",
      values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
      functionFragment: "_vaultController",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "_vaultController()",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "_vaultId_nftVaultAddress",
      values: [PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
      functionFragment: "_vaultId_nftVaultAddress(uint96)",
      values: [PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
      functionFragment: "initialize",
      values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
      functionFragment: "initialize(address)",
      values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
      functionFragment: "mintVault",
      values: [PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
      functionFragment: "mintVault(uint96)",
      values: [PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
    encodeFunctionData(
      functionFragment: "registerUnderlying",
      values: [PromiseOrValue<string>, PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
      functionFragment: "registerUnderlying(address,address)",
      values: [PromiseOrValue<string>, PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
      functionFragment: "renounceOwnership",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "renounceOwnership()",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "retrieveUnderlying",
      values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ]
    ): string;
    encodeFunctionData(
      functionFragment: "retrieveUnderlying(uint256,address,address)",
      values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ]
    ): string;
    encodeFunctionData(
      functionFragment: "transferOwnership",
      values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
      functionFragment: "transferOwnership(address)",
      values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
      functionFragment: "vaultId",
      values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
      functionFragment: "vaultId(address)",
      values: [PromiseOrValue<string>]
    ): string;
  
    decodeFunctionResult(
      functionFragment: "NftVaultAddress",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "NftVaultAddress(uint96)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "NftVaultId", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "NftVaultId(address)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "_CollateralToken_underlying",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "_CollateralToken_underlying(address)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "_nfpManager",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "_nfpManager()",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "_nftVaultAddress_vaultId",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "_nftVaultAddress_vaultId(address)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "_underlying_CollateralToken",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "_underlying_CollateralToken(address)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "_vaultAddress_vaultId",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "_vaultAddress_vaultId(address)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "_vaultController",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "_vaultController()",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "_vaultId_nftVaultAddress",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "_vaultId_nftVaultAddress(uint96)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "initialize(address)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "mintVault", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "mintVault(uint96)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "registerUnderlying",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "registerUnderlying(address,address)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "renounceOwnership",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "renounceOwnership()",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "retrieveUnderlying",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "retrieveUnderlying(uint256,address,address)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "transferOwnership",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "transferOwnership(address)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "vaultId", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "vaultId(address)",
      data: BytesLike
    ): Result;
  
    events: {
      "NewNftVault(address,uint256)": EventFragment;
      "OwnershipTransferred(address,address)": EventFragment;
    };
  
    getEvent(nameOrSignatureOrTopic: "NewNftVault"): EventFragment;
    getEvent(
      nameOrSignatureOrTopic: "NewNftVault(address,uint256)"
    ): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(
      nameOrSignatureOrTopic: "OwnershipTransferred(address,address)"
    ): EventFragment;
  }
  
  export interface NewNftVaultEventObject {
    nft_vault_address: string;
    vaultId: BigNumber;
  }
  export type NewNftVaultEvent = TypedEvent<
    [string, BigNumber],
    NewNftVaultEventObject
  >;
  
  export type NewNftVaultEventFilter = TypedEventFilter<NewNftVaultEvent>;
  
  export interface OwnershipTransferredEventObject {
    previousOwner: string;
    newOwner: string;
  }
  export type OwnershipTransferredEvent = TypedEvent<
    [string, string],
    OwnershipTransferredEventObject
  >;
  
  export type OwnershipTransferredEventFilter =
    TypedEventFilter<OwnershipTransferredEvent>;
  
  export interface NftVaultController extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
  
    interface: NftVaultControllerInterface;
  
    queryFilter<TEvent extends TypedEvent>(
      event: TypedEventFilter<TEvent>,
      fromBlockOrBlockhash?: string | number | undefined,
      toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;
  
    listeners<TEvent extends TypedEvent>(
      eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(
      eventFilter: TypedEventFilter<TEvent>
    ): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
  
    functions: {
      NftVaultAddress(
        vault_id: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<[string]>;
  
      "NftVaultAddress(uint96)"(
        vault_id: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<[string]>;
  
      NftVaultId(
        nft_vault_address: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<[BigNumber]>;
  
      "NftVaultId(address)"(
        nft_vault_address: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<[BigNumber]>;
  
      _CollateralToken_underlying(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<[string]>;
  
      "_CollateralToken_underlying(address)"(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<[string]>;
  
      _nfpManager(overrides?: CallOverrides): Promise<[string]>;
  
      "_nfpManager()"(overrides?: CallOverrides): Promise<[string]>;
  
      _nftVaultAddress_vaultId(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<[BigNumber]>;
  
      "_nftVaultAddress_vaultId(address)"(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<[BigNumber]>;
  
      _underlying_CollateralToken(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<[string]>;
  
      "_underlying_CollateralToken(address)"(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<[string]>;
  
      _vaultAddress_vaultId(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<[BigNumber]>;
  
      "_vaultAddress_vaultId(address)"(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<[BigNumber]>;
  
      _vaultController(overrides?: CallOverrides): Promise<[string]>;
  
      "_vaultController()"(overrides?: CallOverrides): Promise<[string]>;
  
      _vaultId_nftVaultAddress(
        arg0: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<[string]>;
  
      "_vaultId_nftVaultAddress(uint96)"(
        arg0: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<[string]>;
  
      initialize(
        vaultController_: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      "initialize(address)"(
        vaultController_: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      mintVault(
        id: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      "mintVault(uint96)"(
        id: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      owner(overrides?: CallOverrides): Promise<[string]>;
  
      "owner()"(overrides?: CallOverrides): Promise<[string]>;
  
      registerUnderlying(
        capped_token: PromiseOrValue<string>,
        underlying_address: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      "registerUnderlying(address,address)"(
        capped_token: PromiseOrValue<string>,
        underlying_address: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      renounceOwnership(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      "renounceOwnership()"(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      retrieveUnderlying(
        tokenId: PromiseOrValue<BigNumberish>,
        nft_vault: PromiseOrValue<string>,
        target: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      "retrieveUnderlying(uint256,address,address)"(
        tokenId: PromiseOrValue<BigNumberish>,
        nft_vault: PromiseOrValue<string>,
        target: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      "transferOwnership(address)"(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      vaultId(
        vault_address: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<[BigNumber]>;
  
      "vaultId(address)"(
        vault_address: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<[BigNumber]>;
    };
  
    NftVaultAddress(
      vault_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  
    "NftVaultAddress(uint96)"(
      vault_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  
    NftVaultId(
      nft_vault_address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  
    "NftVaultId(address)"(
      nft_vault_address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  
    _CollateralToken_underlying(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;
  
    "_CollateralToken_underlying(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;
  
    _nfpManager(overrides?: CallOverrides): Promise<string>;
  
    "_nfpManager()"(overrides?: CallOverrides): Promise<string>;
  
    _nftVaultAddress_vaultId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  
    "_nftVaultAddress_vaultId(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  
    _underlying_CollateralToken(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;
  
    "_underlying_CollateralToken(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;
  
    _vaultAddress_vaultId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  
    "_vaultAddress_vaultId(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  
    _vaultController(overrides?: CallOverrides): Promise<string>;
  
    "_vaultController()"(overrides?: CallOverrides): Promise<string>;
  
    _vaultId_nftVaultAddress(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  
    "_vaultId_nftVaultAddress(uint96)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  
    initialize(
      vaultController_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    "initialize(address)"(
      vaultController_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    mintVault(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    "mintVault(uint96)"(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    owner(overrides?: CallOverrides): Promise<string>;
  
    "owner()"(overrides?: CallOverrides): Promise<string>;
  
    registerUnderlying(
      capped_token: PromiseOrValue<string>,
      underlying_address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    "registerUnderlying(address,address)"(
      capped_token: PromiseOrValue<string>,
      underlying_address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    retrieveUnderlying(
      tokenId: PromiseOrValue<BigNumberish>,
      nft_vault: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    "retrieveUnderlying(uint256,address,address)"(
      tokenId: PromiseOrValue<BigNumberish>,
      nft_vault: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    vaultId(
      vault_address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  
    "vaultId(address)"(
      vault_address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  
    callStatic: {
      NftVaultAddress(
        vault_id: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<string>;
  
      "NftVaultAddress(uint96)"(
        vault_id: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<string>;
  
      NftVaultId(
        nft_vault_address: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "NftVaultId(address)"(
        nft_vault_address: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      _CollateralToken_underlying(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<string>;
  
      "_CollateralToken_underlying(address)"(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<string>;
  
      _nfpManager(overrides?: CallOverrides): Promise<string>;
  
      "_nfpManager()"(overrides?: CallOverrides): Promise<string>;
  
      _nftVaultAddress_vaultId(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "_nftVaultAddress_vaultId(address)"(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      _underlying_CollateralToken(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<string>;
  
      "_underlying_CollateralToken(address)"(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<string>;
  
      _vaultAddress_vaultId(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "_vaultAddress_vaultId(address)"(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      _vaultController(overrides?: CallOverrides): Promise<string>;
  
      "_vaultController()"(overrides?: CallOverrides): Promise<string>;
  
      _vaultId_nftVaultAddress(
        arg0: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<string>;
  
      "_vaultId_nftVaultAddress(uint96)"(
        arg0: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<string>;
  
      initialize(
        vaultController_: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<void>;
  
      "initialize(address)"(
        vaultController_: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<void>;
  
      mintVault(
        id: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<string>;
  
      "mintVault(uint96)"(
        id: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<string>;
  
      owner(overrides?: CallOverrides): Promise<string>;
  
      "owner()"(overrides?: CallOverrides): Promise<string>;
  
      registerUnderlying(
        capped_token: PromiseOrValue<string>,
        underlying_address: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<void>;
  
      "registerUnderlying(address,address)"(
        capped_token: PromiseOrValue<string>,
        underlying_address: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<void>;
  
      renounceOwnership(overrides?: CallOverrides): Promise<void>;
  
      "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;
  
      retrieveUnderlying(
        tokenId: PromiseOrValue<BigNumberish>,
        nft_vault: PromiseOrValue<string>,
        target: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<void>;
  
      "retrieveUnderlying(uint256,address,address)"(
        tokenId: PromiseOrValue<BigNumberish>,
        nft_vault: PromiseOrValue<string>,
        target: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<void>;
  
      transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<void>;
  
      "transferOwnership(address)"(
        newOwner: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<void>;
  
      vaultId(
        vault_address: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "vaultId(address)"(
        vault_address: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
    };
  
    filters: {
      "NewNftVault(address,uint256)"(
        nft_vault_address?: null,
        vaultId?: null
      ): NewNftVaultEventFilter;
      NewNftVault(
        nft_vault_address?: null,
        vaultId?: null
      ): NewNftVaultEventFilter;
  
      "OwnershipTransferred(address,address)"(
        previousOwner?: PromiseOrValue<string> | null,
        newOwner?: PromiseOrValue<string> | null
      ): OwnershipTransferredEventFilter;
      OwnershipTransferred(
        previousOwner?: PromiseOrValue<string> | null,
        newOwner?: PromiseOrValue<string> | null
      ): OwnershipTransferredEventFilter;
    };
  
    estimateGas: {
      NftVaultAddress(
        vault_id: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "NftVaultAddress(uint96)"(
        vault_id: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      NftVaultId(
        nft_vault_address: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "NftVaultId(address)"(
        nft_vault_address: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      _CollateralToken_underlying(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "_CollateralToken_underlying(address)"(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      _nfpManager(overrides?: CallOverrides): Promise<BigNumber>;
  
      "_nfpManager()"(overrides?: CallOverrides): Promise<BigNumber>;
  
      _nftVaultAddress_vaultId(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "_nftVaultAddress_vaultId(address)"(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      _underlying_CollateralToken(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "_underlying_CollateralToken(address)"(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      _vaultAddress_vaultId(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "_vaultAddress_vaultId(address)"(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      _vaultController(overrides?: CallOverrides): Promise<BigNumber>;
  
      "_vaultController()"(overrides?: CallOverrides): Promise<BigNumber>;
  
      _vaultId_nftVaultAddress(
        arg0: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "_vaultId_nftVaultAddress(uint96)"(
        arg0: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      initialize(
        vaultController_: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      "initialize(address)"(
        vaultController_: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      mintVault(
        id: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      "mintVault(uint96)"(
        id: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      owner(overrides?: CallOverrides): Promise<BigNumber>;
  
      "owner()"(overrides?: CallOverrides): Promise<BigNumber>;
  
      registerUnderlying(
        capped_token: PromiseOrValue<string>,
        underlying_address: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      "registerUnderlying(address,address)"(
        capped_token: PromiseOrValue<string>,
        underlying_address: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      renounceOwnership(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      "renounceOwnership()"(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      retrieveUnderlying(
        tokenId: PromiseOrValue<BigNumberish>,
        nft_vault: PromiseOrValue<string>,
        target: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      "retrieveUnderlying(uint256,address,address)"(
        tokenId: PromiseOrValue<BigNumberish>,
        nft_vault: PromiseOrValue<string>,
        target: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      "transferOwnership(address)"(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      vaultId(
        vault_address: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "vaultId(address)"(
        vault_address: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
    };
  
    populateTransaction: {
      NftVaultAddress(
        vault_id: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      "NftVaultAddress(uint96)"(
        vault_id: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      NftVaultId(
        nft_vault_address: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      "NftVaultId(address)"(
        nft_vault_address: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      _CollateralToken_underlying(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      "_CollateralToken_underlying(address)"(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      _nfpManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      "_nfpManager()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      _nftVaultAddress_vaultId(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      "_nftVaultAddress_vaultId(address)"(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      _underlying_CollateralToken(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      "_underlying_CollateralToken(address)"(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      _vaultAddress_vaultId(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      "_vaultAddress_vaultId(address)"(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      _vaultController(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      "_vaultController()"(
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      _vaultId_nftVaultAddress(
        arg0: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      "_vaultId_nftVaultAddress(uint96)"(
        arg0: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      initialize(
        vaultController_: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      "initialize(address)"(
        vaultController_: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      mintVault(
        id: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      "mintVault(uint96)"(
        id: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      registerUnderlying(
        capped_token: PromiseOrValue<string>,
        underlying_address: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      "registerUnderlying(address,address)"(
        capped_token: PromiseOrValue<string>,
        underlying_address: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      renounceOwnership(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      "renounceOwnership()"(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      retrieveUnderlying(
        tokenId: PromiseOrValue<BigNumberish>,
        nft_vault: PromiseOrValue<string>,
        target: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      "retrieveUnderlying(uint256,address,address)"(
        tokenId: PromiseOrValue<BigNumberish>,
        nft_vault: PromiseOrValue<string>,
        target: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      "transferOwnership(address)"(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      vaultId(
        vault_address: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      "vaultId(address)"(
        vault_address: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
    };
  }