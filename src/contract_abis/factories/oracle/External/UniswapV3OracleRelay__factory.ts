/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  UniswapV3OracleRelay,
  UniswapV3OracleRelayInterface,
} from "../../../oracle/External/UniswapV3OracleRelay";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint32",
        name: "lookback",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "pool_address",
        type: "address",
      },
      {
        internalType: "bool",
        name: "quote_token_is_token0",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "mul",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "div",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "_div",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_lookback",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_mul",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_pool",
    outputs: [
      {
        internalType: "contract IUniswapV3PoolDerivedState",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_poolAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_quoteTokenIsToken0",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "currentValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode = "";

type UniswapV3OracleRelayConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UniswapV3OracleRelayConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UniswapV3OracleRelay__factory extends ContractFactory {
  constructor(...args: UniswapV3OracleRelayConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    lookback: BigNumberish,
    pool_address: string,
    quote_token_is_token0: boolean,
    mul: BigNumberish,
    div: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<UniswapV3OracleRelay> {
    return super.deploy(
      lookback,
      pool_address,
      quote_token_is_token0,
      mul,
      div,
      overrides || {}
    ) as Promise<UniswapV3OracleRelay>;
  }
  override getDeployTransaction(
    lookback: BigNumberish,
    pool_address: string,
    quote_token_is_token0: boolean,
    mul: BigNumberish,
    div: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      lookback,
      pool_address,
      quote_token_is_token0,
      mul,
      div,
      overrides || {}
    );
  }
  override attach(address: string): UniswapV3OracleRelay {
    return super.attach(address) as UniswapV3OracleRelay;
  }
  override connect(signer: Signer): UniswapV3OracleRelay__factory {
    return super.connect(signer) as UniswapV3OracleRelay__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UniswapV3OracleRelayInterface {
    return new utils.Interface(_abi) as UniswapV3OracleRelayInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UniswapV3OracleRelay {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as UniswapV3OracleRelay;
  }
}
