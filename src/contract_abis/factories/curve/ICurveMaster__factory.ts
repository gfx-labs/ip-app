/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ICurveMaster,
  ICurveMasterInterface,
} from "../../curve/ICurveMaster";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "curve_address",
        type: "address",
      },
      {
        internalType: "int256",
        name: "x_value",
        type: "int256",
      },
    ],
    name: "getValueAt",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token_address",
        type: "address",
      },
      {
        internalType: "address",
        name: "curve_address",
        type: "address",
      },
    ],
    name: "setCurve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "vault_master_address",
        type: "address",
      },
    ],
    name: "setVaultController",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "vaultControllerAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class ICurveMaster__factory {
  static readonly abi = _abi;
  static createInterface(): ICurveMasterInterface {
    return new utils.Interface(_abi) as ICurveMasterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ICurveMaster {
    return new Contract(address, _abi, signerOrProvider) as ICurveMaster;
  }
}
