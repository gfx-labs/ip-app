/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ThreeLines0_100,
  ThreeLines0_100Interface,
} from "../../../curve/Logic/ThreeLines0_100";

const _abi = [
  {
    inputs: [
      {
        internalType: "int256",
        name: "r0",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "r1",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "r2",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "s1",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "s2",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "_r0",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_r1",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_r2",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_s1",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_s2",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x_value",
        type: "int256",
      },
    ],
    name: "valueAt",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode = "";

type ThreeLines0_100ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ThreeLines0_100ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ThreeLines0_100__factory extends ContractFactory {
  constructor(...args: ThreeLines0_100ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    r0: BigNumberish,
    r1: BigNumberish,
    r2: BigNumberish,
    s1: BigNumberish,
    s2: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ThreeLines0_100> {
    return super.deploy(
      r0,
      r1,
      r2,
      s1,
      s2,
      overrides || {}
    ) as Promise<ThreeLines0_100>;
  }
  override getDeployTransaction(
    r0: BigNumberish,
    r1: BigNumberish,
    r2: BigNumberish,
    s1: BigNumberish,
    s2: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(r0, r1, r2, s1, s2, overrides || {});
  }
  override attach(address: string): ThreeLines0_100 {
    return super.attach(address) as ThreeLines0_100;
  }
  override connect(signer: Signer): ThreeLines0_100__factory {
    return super.connect(signer) as ThreeLines0_100__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ThreeLines0_100Interface {
    return new utils.Interface(_abi) as ThreeLines0_100Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ThreeLines0_100 {
    return new Contract(address, _abi, signerOrProvider) as ThreeLines0_100;
  }
}
