/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
  } from "ethers";
  import type { FunctionFragment, Result } from "@ethersproject/abi";
  import type { Listener, Provider } from "@ethersproject/providers";
  import type {
    TypedEventFilter,
    TypedEvent,
    TypedListener,
    OnEvent,
    PromiseOrValue,
  } from "../common";
  
  export interface VaultNftInterface extends utils.Interface {
    functions: {
      "_controller()": FunctionFragment;
      "_nftController()": FunctionFragment;
      "_vaultInfo()": FunctionFragment;
      "collect(uint256,address)": FunctionFragment;
      "controllerTransfer(address,address,uint256)": FunctionFragment;
      "id()": FunctionFragment;
      "nftVaultControllerTransfer(address,address,uint256)": FunctionFragment;
      "parentVault()": FunctionFragment;
    };
  
    getFunction(
      nameOrSignatureOrTopic:
        | "_controller"
        | "_controller()"
        | "_nftController"
        | "_nftController()"
        | "_vaultInfo"
        | "_vaultInfo()"
        | "collect"
        | "collect(uint256,address)"
        | "controllerTransfer"
        | "controllerTransfer(address,address,uint256)"
        | "id"
        | "id()"
        | "nftVaultControllerTransfer"
        | "nftVaultControllerTransfer(address,address,uint256)"
        | "parentVault"
        | "parentVault()"
    ): FunctionFragment;
  
    encodeFunctionData(
      functionFragment: "_controller",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "_controller()",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "_nftController",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "_nftController()",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "_vaultInfo",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "_vaultInfo()",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "collect",
      values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
      functionFragment: "collect(uint256,address)",
      values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
      functionFragment: "controllerTransfer",
      values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
      ]
    ): string;
    encodeFunctionData(
      functionFragment: "controllerTransfer(address,address,uint256)",
      values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
      ]
    ): string;
    encodeFunctionData(functionFragment: "id", values?: undefined): string;
    encodeFunctionData(functionFragment: "id()", values?: undefined): string;
    encodeFunctionData(
      functionFragment: "nftVaultControllerTransfer",
      values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
      ]
    ): string;
    encodeFunctionData(
      functionFragment: "nftVaultControllerTransfer(address,address,uint256)",
      values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
      ]
    ): string;
    encodeFunctionData(
      functionFragment: "parentVault",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "parentVault()",
      values?: undefined
    ): string;
  
    decodeFunctionResult(
      functionFragment: "_controller",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "_controller()",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "_nftController",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "_nftController()",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "_vaultInfo", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "_vaultInfo()",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "collect(uint256,address)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "controllerTransfer",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "controllerTransfer(address,address,uint256)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "id", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "id()", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "nftVaultControllerTransfer",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "nftVaultControllerTransfer(address,address,uint256)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "parentVault",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "parentVault()",
      data: BytesLike
    ): Result;
  
    events: {};
  }
  
  export interface VaultNft extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
  
    interface: VaultNftInterface;
  
    queryFilter<TEvent extends TypedEvent>(
      event: TypedEventFilter<TEvent>,
      fromBlockOrBlockhash?: string | number | undefined,
      toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;
  
    listeners<TEvent extends TypedEvent>(
      eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(
      eventFilter: TypedEventFilter<TEvent>
    ): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
  
    functions: {
      _controller(overrides?: CallOverrides): Promise<[string]>;
  
      "_controller()"(overrides?: CallOverrides): Promise<[string]>;
  
      _nftController(overrides?: CallOverrides): Promise<[string]>;
  
      "_nftController()"(overrides?: CallOverrides): Promise<[string]>;
  
      _vaultInfo(
        overrides?: CallOverrides
      ): Promise<[BigNumber, string] & { id: BigNumber; vault_address: string }>;
  
      "_vaultInfo()"(
        overrides?: CallOverrides
      ): Promise<[BigNumber, string] & { id: BigNumber; vault_address: string }>;
  
      collect(
        tokenId: PromiseOrValue<BigNumberish>,
        recipient: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      "collect(uint256,address)"(
        tokenId: PromiseOrValue<BigNumberish>,
        recipient: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      controllerTransfer(
        _token: PromiseOrValue<string>,
        _to: PromiseOrValue<string>,
        _tokenId: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      "controllerTransfer(address,address,uint256)"(
        _token: PromiseOrValue<string>,
        _to: PromiseOrValue<string>,
        _tokenId: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      id(overrides?: CallOverrides): Promise<[BigNumber]>;
  
      "id()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  
      nftVaultControllerTransfer(
        _token: PromiseOrValue<string>,
        _to: PromiseOrValue<string>,
        _tokenId: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      "nftVaultControllerTransfer(address,address,uint256)"(
        _token: PromiseOrValue<string>,
        _to: PromiseOrValue<string>,
        _tokenId: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      parentVault(
        overrides?: CallOverrides
      ): Promise<[string] & { vault: string }>;
  
      "parentVault()"(
        overrides?: CallOverrides
      ): Promise<[string] & { vault: string }>;
    };
  
    _controller(overrides?: CallOverrides): Promise<string>;
  
    "_controller()"(overrides?: CallOverrides): Promise<string>;
  
    _nftController(overrides?: CallOverrides): Promise<string>;
  
    "_nftController()"(overrides?: CallOverrides): Promise<string>;
  
    _vaultInfo(
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { id: BigNumber; vault_address: string }>;
  
    "_vaultInfo()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { id: BigNumber; vault_address: string }>;
  
    collect(
      tokenId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    "collect(uint256,address)"(
      tokenId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    controllerTransfer(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    "controllerTransfer(address,address,uint256)"(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    id(overrides?: CallOverrides): Promise<BigNumber>;
  
    "id()"(overrides?: CallOverrides): Promise<BigNumber>;
  
    nftVaultControllerTransfer(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    "nftVaultControllerTransfer(address,address,uint256)"(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    parentVault(overrides?: CallOverrides): Promise<string>;
  
    "parentVault()"(overrides?: CallOverrides): Promise<string>;
  
    callStatic: {
      _controller(overrides?: CallOverrides): Promise<string>;
  
      "_controller()"(overrides?: CallOverrides): Promise<string>;
  
      _nftController(overrides?: CallOverrides): Promise<string>;
  
      "_nftController()"(overrides?: CallOverrides): Promise<string>;
  
      _vaultInfo(
        overrides?: CallOverrides
      ): Promise<[BigNumber, string] & { id: BigNumber; vault_address: string }>;
  
      "_vaultInfo()"(
        overrides?: CallOverrides
      ): Promise<[BigNumber, string] & { id: BigNumber; vault_address: string }>;
  
      collect(
        tokenId: PromiseOrValue<BigNumberish>,
        recipient: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<void>;
  
      "collect(uint256,address)"(
        tokenId: PromiseOrValue<BigNumberish>,
        recipient: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<void>;
  
      controllerTransfer(
        _token: PromiseOrValue<string>,
        _to: PromiseOrValue<string>,
        _tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<void>;
  
      "controllerTransfer(address,address,uint256)"(
        _token: PromiseOrValue<string>,
        _to: PromiseOrValue<string>,
        _tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<void>;
  
      id(overrides?: CallOverrides): Promise<BigNumber>;
  
      "id()"(overrides?: CallOverrides): Promise<BigNumber>;
  
      nftVaultControllerTransfer(
        _token: PromiseOrValue<string>,
        _to: PromiseOrValue<string>,
        _tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<void>;
  
      "nftVaultControllerTransfer(address,address,uint256)"(
        _token: PromiseOrValue<string>,
        _to: PromiseOrValue<string>,
        _tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<void>;
  
      parentVault(overrides?: CallOverrides): Promise<string>;
  
      "parentVault()"(overrides?: CallOverrides): Promise<string>;
    };
  
    filters: {};
  
    estimateGas: {
      _controller(overrides?: CallOverrides): Promise<BigNumber>;
  
      "_controller()"(overrides?: CallOverrides): Promise<BigNumber>;
  
      _nftController(overrides?: CallOverrides): Promise<BigNumber>;
  
      "_nftController()"(overrides?: CallOverrides): Promise<BigNumber>;
  
      _vaultInfo(overrides?: CallOverrides): Promise<BigNumber>;
  
      "_vaultInfo()"(overrides?: CallOverrides): Promise<BigNumber>;
  
      collect(
        tokenId: PromiseOrValue<BigNumberish>,
        recipient: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      "collect(uint256,address)"(
        tokenId: PromiseOrValue<BigNumberish>,
        recipient: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      controllerTransfer(
        _token: PromiseOrValue<string>,
        _to: PromiseOrValue<string>,
        _tokenId: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      "controllerTransfer(address,address,uint256)"(
        _token: PromiseOrValue<string>,
        _to: PromiseOrValue<string>,
        _tokenId: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      id(overrides?: CallOverrides): Promise<BigNumber>;
  
      "id()"(overrides?: CallOverrides): Promise<BigNumber>;
  
      nftVaultControllerTransfer(
        _token: PromiseOrValue<string>,
        _to: PromiseOrValue<string>,
        _tokenId: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      "nftVaultControllerTransfer(address,address,uint256)"(
        _token: PromiseOrValue<string>,
        _to: PromiseOrValue<string>,
        _tokenId: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      parentVault(overrides?: CallOverrides): Promise<BigNumber>;
  
      "parentVault()"(overrides?: CallOverrides): Promise<BigNumber>;
    };
  
    populateTransaction: {
      _controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      "_controller()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      _nftController(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      "_nftController()"(
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      _vaultInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      "_vaultInfo()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      collect(
        tokenId: PromiseOrValue<BigNumberish>,
        recipient: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      "collect(uint256,address)"(
        tokenId: PromiseOrValue<BigNumberish>,
        recipient: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      controllerTransfer(
        _token: PromiseOrValue<string>,
        _to: PromiseOrValue<string>,
        _tokenId: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      "controllerTransfer(address,address,uint256)"(
        _token: PromiseOrValue<string>,
        _to: PromiseOrValue<string>,
        _tokenId: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      id(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      "id()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      nftVaultControllerTransfer(
        _token: PromiseOrValue<string>,
        _to: PromiseOrValue<string>,
        _tokenId: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      "nftVaultControllerTransfer(address,address,uint256)"(
        _token: PromiseOrValue<string>,
        _to: PromiseOrValue<string>,
        _tokenId: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      parentVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      "parentVault()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
  }