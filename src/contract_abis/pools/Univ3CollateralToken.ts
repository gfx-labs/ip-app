/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
  } from "ethers";
  import type {
    FunctionFragment,
    Result,
    EventFragment,
  } from "@ethersproject/abi";
  import type { Listener, Provider } from "@ethersproject/providers";
  import type {
    TypedEventFilter,
    TypedEvent,
    TypedListener,
    OnEvent,
    PromiseOrValue,
  } from "../common";
  
  export interface Univ3CollateralTokenInterface extends utils.Interface {
    functions: {
      "_nftVaultController()": FunctionFragment;
      "_positionValuator()": FunctionFragment;
      "_underlying()": FunctionFragment;
      "_underlyingOwners(address,uint256)": FunctionFragment;
      "_vaultController()": FunctionFragment;
      "allowance(address,address)": FunctionFragment;
      "approve(address,uint256)": FunctionFragment;
      "balanceOf(address)": FunctionFragment;
      "decimals()": FunctionFragment;
      "decreaseAllowance(address,uint256)": FunctionFragment;
      "deposit(uint256,uint96)": FunctionFragment;
      "depositedPositions(address)": FunctionFragment;
      "increaseAllowance(address,uint256)": FunctionFragment;
      "initialize(string,string,address,address,address,address)": FunctionFragment;
      "name()": FunctionFragment;
      "owner()": FunctionFragment;
      "renounceOwnership()": FunctionFragment;
      "symbol()": FunctionFragment;
      "totalSupply()": FunctionFragment;
      "transfer(address,uint256)": FunctionFragment;
      "transferFrom(address,address,uint256)": FunctionFragment;
      "transferOwnership(address)": FunctionFragment;
    };
  
    getFunction(
      nameOrSignatureOrTopic:
        | "_nftVaultController"
        | "_nftVaultController()"
        | "_positionValuator"
        | "_positionValuator()"
        | "_underlying"
        | "_underlying()"
        | "_underlyingOwners"
        | "_underlyingOwners(address,uint256)"
        | "_vaultController"
        | "_vaultController()"
        | "allowance"
        | "allowance(address,address)"
        | "approve"
        | "approve(address,uint256)"
        | "balanceOf"
        | "balanceOf(address)"
        | "decimals"
        | "decimals()"
        | "decreaseAllowance"
        | "decreaseAllowance(address,uint256)"
        | "deposit"
        | "deposit(uint256,uint96)"
        | "depositedPositions"
        | "depositedPositions(address)"
        | "increaseAllowance"
        | "increaseAllowance(address,uint256)"
        | "initialize"
        | "initialize(string,string,address,address,address,address)"
        | "name"
        | "name()"
        | "owner"
        | "owner()"
        | "renounceOwnership"
        | "renounceOwnership()"
        | "symbol"
        | "symbol()"
        | "totalSupply"
        | "totalSupply()"
        | "transfer"
        | "transfer(address,uint256)"
        | "transferFrom"
        | "transferFrom(address,address,uint256)"
        | "transferOwnership"
        | "transferOwnership(address)"
    ): FunctionFragment;
  
    encodeFunctionData(
      functionFragment: "_nftVaultController",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "_nftVaultController()",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "_positionValuator",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "_positionValuator()",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "_underlying",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "_underlying()",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "_underlyingOwners",
      values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
      functionFragment: "_underlyingOwners(address,uint256)",
      values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
      functionFragment: "_vaultController",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "_vaultController()",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "allowance",
      values: [PromiseOrValue<string>, PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
      functionFragment: "allowance(address,address)",
      values: [PromiseOrValue<string>, PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
      functionFragment: "approve",
      values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
      functionFragment: "approve(address,uint256)",
      values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
      functionFragment: "balanceOf",
      values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
      functionFragment: "balanceOf(address)",
      values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
    encodeFunctionData(
      functionFragment: "decimals()",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "decreaseAllowance",
      values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
      functionFragment: "decreaseAllowance(address,uint256)",
      values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
      functionFragment: "deposit",
      values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
      functionFragment: "deposit(uint256,uint96)",
      values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
      functionFragment: "depositedPositions",
      values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
      functionFragment: "depositedPositions(address)",
      values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
      functionFragment: "increaseAllowance",
      values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
      functionFragment: "increaseAllowance(address,uint256)",
      values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
      functionFragment: "initialize",
      values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ]
    ): string;
    encodeFunctionData(
      functionFragment: "initialize(string,string,address,address,address,address)",
      values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ]
    ): string;
    encodeFunctionData(functionFragment: "name", values?: undefined): string;
    encodeFunctionData(functionFragment: "name()", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
    encodeFunctionData(
      functionFragment: "renounceOwnership",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "renounceOwnership()",
      values?: undefined
    ): string;
    encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
    encodeFunctionData(functionFragment: "symbol()", values?: undefined): string;
    encodeFunctionData(
      functionFragment: "totalSupply",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "totalSupply()",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "transfer",
      values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
      functionFragment: "transfer(address,uint256)",
      values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
      functionFragment: "transferFrom",
      values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
      ]
    ): string;
    encodeFunctionData(
      functionFragment: "transferFrom(address,address,uint256)",
      values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
      ]
    ): string;
    encodeFunctionData(
      functionFragment: "transferOwnership",
      values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
      functionFragment: "transferOwnership(address)",
      values: [PromiseOrValue<string>]
    ): string;
  
    decodeFunctionResult(
      functionFragment: "_nftVaultController",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "_nftVaultController()",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "_positionValuator",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "_positionValuator()",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "_underlying",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "_underlying()",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "_underlyingOwners",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "_underlyingOwners(address,uint256)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "_vaultController",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "_vaultController()",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "allowance(address,address)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "approve(address,uint256)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "balanceOf(address)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decimals()", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "decreaseAllowance",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "decreaseAllowance(address,uint256)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "deposit(uint256,uint96)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "depositedPositions",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "depositedPositions(address)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "increaseAllowance",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "increaseAllowance(address,uint256)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "initialize(string,string,address,address,address,address)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "renounceOwnership",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "renounceOwnership()",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "symbol()", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "totalSupply",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "totalSupply()",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "transfer(address,uint256)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "transferFrom",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "transferFrom(address,address,uint256)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "transferOwnership",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "transferOwnership(address)",
      data: BytesLike
    ): Result;
  
    events: {
      "Approval(address,address,uint256)": EventFragment;
      "OwnershipTransferred(address,address)": EventFragment;
      "Transfer(address,address,uint256)": EventFragment;
    };
  
    getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
    getEvent(
      nameOrSignatureOrTopic: "Approval(address,address,uint256)"
    ): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(
      nameOrSignatureOrTopic: "OwnershipTransferred(address,address)"
    ): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
    getEvent(
      nameOrSignatureOrTopic: "Transfer(address,address,uint256)"
    ): EventFragment;
  }
  
  export interface ApprovalEventObject {
    owner: string;
    spender: string;
    value: BigNumber;
  }
  export type ApprovalEvent = TypedEvent<
    [string, string, BigNumber],
    ApprovalEventObject
  >;
  
  export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;
  
  export interface OwnershipTransferredEventObject {
    previousOwner: string;
    newOwner: string;
  }
  export type OwnershipTransferredEvent = TypedEvent<
    [string, string],
    OwnershipTransferredEventObject
  >;
  
  export type OwnershipTransferredEventFilter =
    TypedEventFilter<OwnershipTransferredEvent>;
  
  export interface TransferEventObject {
    from: string;
    to: string;
    value: BigNumber;
  }
  export type TransferEvent = TypedEvent<
    [string, string, BigNumber],
    TransferEventObject
  >;
  
  export type TransferEventFilter = TypedEventFilter<TransferEvent>;
  
  export interface Univ3CollateralToken extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
  
    interface: Univ3CollateralTokenInterface;
  
    queryFilter<TEvent extends TypedEvent>(
      event: TypedEventFilter<TEvent>,
      fromBlockOrBlockhash?: string | number | undefined,
      toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;
  
    listeners<TEvent extends TypedEvent>(
      eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(
      eventFilter: TypedEventFilter<TEvent>
    ): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
  
    functions: {
      _nftVaultController(overrides?: CallOverrides): Promise<[string]>;
  
      "_nftVaultController()"(overrides?: CallOverrides): Promise<[string]>;
  
      _positionValuator(overrides?: CallOverrides): Promise<[string]>;
  
      "_positionValuator()"(overrides?: CallOverrides): Promise<[string]>;
  
      _underlying(overrides?: CallOverrides): Promise<[string]>;
  
      "_underlying()"(overrides?: CallOverrides): Promise<[string]>;
  
      _underlyingOwners(
        arg0: PromiseOrValue<string>,
        arg1: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<[BigNumber]>;
  
      "_underlyingOwners(address,uint256)"(
        arg0: PromiseOrValue<string>,
        arg1: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<[BigNumber]>;
  
      _vaultController(overrides?: CallOverrides): Promise<[string]>;
  
      "_vaultController()"(overrides?: CallOverrides): Promise<[string]>;
  
      allowance(
        owner: PromiseOrValue<string>,
        spender: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<[BigNumber]>;
  
      "allowance(address,address)"(
        owner: PromiseOrValue<string>,
        spender: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<[BigNumber]>;
  
      approve(
        spender: PromiseOrValue<string>,
        amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      "approve(address,uint256)"(
        spender: PromiseOrValue<string>,
        amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      balanceOf(
        vault: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<[BigNumber]>;
  
      "balanceOf(address)"(
        vault: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<[BigNumber]>;
  
      decimals(overrides?: CallOverrides): Promise<[number]>;
  
      "decimals()"(overrides?: CallOverrides): Promise<[number]>;
  
      decreaseAllowance(
        spender: PromiseOrValue<string>,
        subtractedValue: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      "decreaseAllowance(address,uint256)"(
        spender: PromiseOrValue<string>,
        subtractedValue: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      deposit(
        tokenId: PromiseOrValue<BigNumberish>,
        vaultId: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      "deposit(uint256,uint96)"(
        tokenId: PromiseOrValue<BigNumberish>,
        vaultId: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      depositedPositions(
        minter: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<[BigNumber[]]>;
  
      "depositedPositions(address)"(
        minter: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<[BigNumber[]]>;
  
      increaseAllowance(
        spender: PromiseOrValue<string>,
        addedValue: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      "increaseAllowance(address,uint256)"(
        spender: PromiseOrValue<string>,
        addedValue: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      initialize(
        name_: PromiseOrValue<string>,
        symbol_: PromiseOrValue<string>,
        underlying_: PromiseOrValue<string>,
        vaultController_: PromiseOrValue<string>,
        nftVaultController_: PromiseOrValue<string>,
        positionValuator_: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      "initialize(string,string,address,address,address,address)"(
        name_: PromiseOrValue<string>,
        symbol_: PromiseOrValue<string>,
        underlying_: PromiseOrValue<string>,
        vaultController_: PromiseOrValue<string>,
        nftVaultController_: PromiseOrValue<string>,
        positionValuator_: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      name(overrides?: CallOverrides): Promise<[string]>;
  
      "name()"(overrides?: CallOverrides): Promise<[string]>;
  
      owner(overrides?: CallOverrides): Promise<[string]>;
  
      "owner()"(overrides?: CallOverrides): Promise<[string]>;
  
      renounceOwnership(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      "renounceOwnership()"(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      symbol(overrides?: CallOverrides): Promise<[string]>;
  
      "symbol()"(overrides?: CallOverrides): Promise<[string]>;
  
      totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
  
      "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  
      transfer(
        recipient: PromiseOrValue<string>,
        positionIndex: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      "transfer(address,uint256)"(
        recipient: PromiseOrValue<string>,
        positionIndex: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      transferFrom(
        arg0: PromiseOrValue<string>,
        arg1: PromiseOrValue<string>,
        arg2: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<[boolean]>;
  
      "transferFrom(address,address,uint256)"(
        arg0: PromiseOrValue<string>,
        arg1: PromiseOrValue<string>,
        arg2: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<[boolean]>;
  
      transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      "transferOwnership(address)"(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
    };
  
    _nftVaultController(overrides?: CallOverrides): Promise<string>;
  
    "_nftVaultController()"(overrides?: CallOverrides): Promise<string>;
  
    _positionValuator(overrides?: CallOverrides): Promise<string>;
  
    "_positionValuator()"(overrides?: CallOverrides): Promise<string>;
  
    _underlying(overrides?: CallOverrides): Promise<string>;
  
    "_underlying()"(overrides?: CallOverrides): Promise<string>;
  
    _underlyingOwners(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  
    "_underlyingOwners(address,uint256)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  
    _vaultController(overrides?: CallOverrides): Promise<string>;
  
    "_vaultController()"(overrides?: CallOverrides): Promise<string>;
  
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  
    "allowance(address,address)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  
    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    "approve(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    balanceOf(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  
    "balanceOf(address)"(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  
    decimals(overrides?: CallOverrides): Promise<number>;
  
    "decimals()"(overrides?: CallOverrides): Promise<number>;
  
    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    "decreaseAllowance(address,uint256)"(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    deposit(
      tokenId: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    "deposit(uint256,uint96)"(
      tokenId: PromiseOrValue<BigNumberish>,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    depositedPositions(
      minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;
  
    "depositedPositions(address)"(
      minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;
  
    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    "increaseAllowance(address,uint256)"(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    initialize(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      underlying_: PromiseOrValue<string>,
      vaultController_: PromiseOrValue<string>,
      nftVaultController_: PromiseOrValue<string>,
      positionValuator_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    "initialize(string,string,address,address,address,address)"(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      underlying_: PromiseOrValue<string>,
      vaultController_: PromiseOrValue<string>,
      nftVaultController_: PromiseOrValue<string>,
      positionValuator_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    name(overrides?: CallOverrides): Promise<string>;
  
    "name()"(overrides?: CallOverrides): Promise<string>;
  
    owner(overrides?: CallOverrides): Promise<string>;
  
    "owner()"(overrides?: CallOverrides): Promise<string>;
  
    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    symbol(overrides?: CallOverrides): Promise<string>;
  
    "symbol()"(overrides?: CallOverrides): Promise<string>;
  
    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
  
    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;
  
    transfer(
      recipient: PromiseOrValue<string>,
      positionIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    "transfer(address,uint256)"(
      recipient: PromiseOrValue<string>,
      positionIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    transferFrom(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  
    "transferFrom(address,address,uint256)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  
    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    callStatic: {
      _nftVaultController(overrides?: CallOverrides): Promise<string>;
  
      "_nftVaultController()"(overrides?: CallOverrides): Promise<string>;
  
      _positionValuator(overrides?: CallOverrides): Promise<string>;
  
      "_positionValuator()"(overrides?: CallOverrides): Promise<string>;
  
      _underlying(overrides?: CallOverrides): Promise<string>;
  
      "_underlying()"(overrides?: CallOverrides): Promise<string>;
  
      _underlyingOwners(
        arg0: PromiseOrValue<string>,
        arg1: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "_underlyingOwners(address,uint256)"(
        arg0: PromiseOrValue<string>,
        arg1: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      _vaultController(overrides?: CallOverrides): Promise<string>;
  
      "_vaultController()"(overrides?: CallOverrides): Promise<string>;
  
      allowance(
        owner: PromiseOrValue<string>,
        spender: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "allowance(address,address)"(
        owner: PromiseOrValue<string>,
        spender: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      approve(
        spender: PromiseOrValue<string>,
        amount: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<boolean>;
  
      "approve(address,uint256)"(
        spender: PromiseOrValue<string>,
        amount: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<boolean>;
  
      balanceOf(
        vault: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "balanceOf(address)"(
        vault: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      decimals(overrides?: CallOverrides): Promise<number>;
  
      "decimals()"(overrides?: CallOverrides): Promise<number>;
  
      decreaseAllowance(
        spender: PromiseOrValue<string>,
        subtractedValue: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<boolean>;
  
      "decreaseAllowance(address,uint256)"(
        spender: PromiseOrValue<string>,
        subtractedValue: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<boolean>;
  
      deposit(
        tokenId: PromiseOrValue<BigNumberish>,
        vaultId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<void>;
  
      "deposit(uint256,uint96)"(
        tokenId: PromiseOrValue<BigNumberish>,
        vaultId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<void>;
  
      depositedPositions(
        minter: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber[]>;
  
      "depositedPositions(address)"(
        minter: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber[]>;
  
      increaseAllowance(
        spender: PromiseOrValue<string>,
        addedValue: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<boolean>;
  
      "increaseAllowance(address,uint256)"(
        spender: PromiseOrValue<string>,
        addedValue: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<boolean>;
  
      initialize(
        name_: PromiseOrValue<string>,
        symbol_: PromiseOrValue<string>,
        underlying_: PromiseOrValue<string>,
        vaultController_: PromiseOrValue<string>,
        nftVaultController_: PromiseOrValue<string>,
        positionValuator_: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<void>;
  
      "initialize(string,string,address,address,address,address)"(
        name_: PromiseOrValue<string>,
        symbol_: PromiseOrValue<string>,
        underlying_: PromiseOrValue<string>,
        vaultController_: PromiseOrValue<string>,
        nftVaultController_: PromiseOrValue<string>,
        positionValuator_: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<void>;
  
      name(overrides?: CallOverrides): Promise<string>;
  
      "name()"(overrides?: CallOverrides): Promise<string>;
  
      owner(overrides?: CallOverrides): Promise<string>;
  
      "owner()"(overrides?: CallOverrides): Promise<string>;
  
      renounceOwnership(overrides?: CallOverrides): Promise<void>;
  
      "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;
  
      symbol(overrides?: CallOverrides): Promise<string>;
  
      "symbol()"(overrides?: CallOverrides): Promise<string>;
  
      totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
  
      "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;
  
      transfer(
        recipient: PromiseOrValue<string>,
        positionIndex: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<boolean>;
  
      "transfer(address,uint256)"(
        recipient: PromiseOrValue<string>,
        positionIndex: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<boolean>;
  
      transferFrom(
        arg0: PromiseOrValue<string>,
        arg1: PromiseOrValue<string>,
        arg2: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<boolean>;
  
      "transferFrom(address,address,uint256)"(
        arg0: PromiseOrValue<string>,
        arg1: PromiseOrValue<string>,
        arg2: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<boolean>;
  
      transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<void>;
  
      "transferOwnership(address)"(
        newOwner: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<void>;
    };
  
    filters: {
      "Approval(address,address,uint256)"(
        owner?: PromiseOrValue<string> | null,
        spender?: PromiseOrValue<string> | null,
        value?: null
      ): ApprovalEventFilter;
      Approval(
        owner?: PromiseOrValue<string> | null,
        spender?: PromiseOrValue<string> | null,
        value?: null
      ): ApprovalEventFilter;
  
      "OwnershipTransferred(address,address)"(
        previousOwner?: PromiseOrValue<string> | null,
        newOwner?: PromiseOrValue<string> | null
      ): OwnershipTransferredEventFilter;
      OwnershipTransferred(
        previousOwner?: PromiseOrValue<string> | null,
        newOwner?: PromiseOrValue<string> | null
      ): OwnershipTransferredEventFilter;
  
      "Transfer(address,address,uint256)"(
        from?: PromiseOrValue<string> | null,
        to?: PromiseOrValue<string> | null,
        value?: null
      ): TransferEventFilter;
      Transfer(
        from?: PromiseOrValue<string> | null,
        to?: PromiseOrValue<string> | null,
        value?: null
      ): TransferEventFilter;
    };
  
    estimateGas: {
      _nftVaultController(overrides?: CallOverrides): Promise<BigNumber>;
  
      "_nftVaultController()"(overrides?: CallOverrides): Promise<BigNumber>;
  
      _positionValuator(overrides?: CallOverrides): Promise<BigNumber>;
  
      "_positionValuator()"(overrides?: CallOverrides): Promise<BigNumber>;
  
      _underlying(overrides?: CallOverrides): Promise<BigNumber>;
  
      "_underlying()"(overrides?: CallOverrides): Promise<BigNumber>;
  
      _underlyingOwners(
        arg0: PromiseOrValue<string>,
        arg1: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "_underlyingOwners(address,uint256)"(
        arg0: PromiseOrValue<string>,
        arg1: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      _vaultController(overrides?: CallOverrides): Promise<BigNumber>;
  
      "_vaultController()"(overrides?: CallOverrides): Promise<BigNumber>;
  
      allowance(
        owner: PromiseOrValue<string>,
        spender: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "allowance(address,address)"(
        owner: PromiseOrValue<string>,
        spender: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      approve(
        spender: PromiseOrValue<string>,
        amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      "approve(address,uint256)"(
        spender: PromiseOrValue<string>,
        amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      balanceOf(
        vault: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "balanceOf(address)"(
        vault: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      decimals(overrides?: CallOverrides): Promise<BigNumber>;
  
      "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;
  
      decreaseAllowance(
        spender: PromiseOrValue<string>,
        subtractedValue: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      "decreaseAllowance(address,uint256)"(
        spender: PromiseOrValue<string>,
        subtractedValue: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      deposit(
        tokenId: PromiseOrValue<BigNumberish>,
        vaultId: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      "deposit(uint256,uint96)"(
        tokenId: PromiseOrValue<BigNumberish>,
        vaultId: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      depositedPositions(
        minter: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "depositedPositions(address)"(
        minter: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      increaseAllowance(
        spender: PromiseOrValue<string>,
        addedValue: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      "increaseAllowance(address,uint256)"(
        spender: PromiseOrValue<string>,
        addedValue: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      initialize(
        name_: PromiseOrValue<string>,
        symbol_: PromiseOrValue<string>,
        underlying_: PromiseOrValue<string>,
        vaultController_: PromiseOrValue<string>,
        nftVaultController_: PromiseOrValue<string>,
        positionValuator_: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      "initialize(string,string,address,address,address,address)"(
        name_: PromiseOrValue<string>,
        symbol_: PromiseOrValue<string>,
        underlying_: PromiseOrValue<string>,
        vaultController_: PromiseOrValue<string>,
        nftVaultController_: PromiseOrValue<string>,
        positionValuator_: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      name(overrides?: CallOverrides): Promise<BigNumber>;
  
      "name()"(overrides?: CallOverrides): Promise<BigNumber>;
  
      owner(overrides?: CallOverrides): Promise<BigNumber>;
  
      "owner()"(overrides?: CallOverrides): Promise<BigNumber>;
  
      renounceOwnership(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      "renounceOwnership()"(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      symbol(overrides?: CallOverrides): Promise<BigNumber>;
  
      "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;
  
      totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
  
      "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;
  
      transfer(
        recipient: PromiseOrValue<string>,
        positionIndex: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      "transfer(address,uint256)"(
        recipient: PromiseOrValue<string>,
        positionIndex: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      transferFrom(
        arg0: PromiseOrValue<string>,
        arg1: PromiseOrValue<string>,
        arg2: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "transferFrom(address,address,uint256)"(
        arg0: PromiseOrValue<string>,
        arg1: PromiseOrValue<string>,
        arg2: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      "transferOwnership(address)"(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
    };
  
    populateTransaction: {
      _nftVaultController(
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      "_nftVaultController()"(
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      _positionValuator(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      "_positionValuator()"(
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      _underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      "_underlying()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      _underlyingOwners(
        arg0: PromiseOrValue<string>,
        arg1: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      "_underlyingOwners(address,uint256)"(
        arg0: PromiseOrValue<string>,
        arg1: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      _vaultController(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      "_vaultController()"(
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      allowance(
        owner: PromiseOrValue<string>,
        spender: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      "allowance(address,address)"(
        owner: PromiseOrValue<string>,
        spender: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      approve(
        spender: PromiseOrValue<string>,
        amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      "approve(address,uint256)"(
        spender: PromiseOrValue<string>,
        amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      balanceOf(
        vault: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      "balanceOf(address)"(
        vault: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      decreaseAllowance(
        spender: PromiseOrValue<string>,
        subtractedValue: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      "decreaseAllowance(address,uint256)"(
        spender: PromiseOrValue<string>,
        subtractedValue: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      deposit(
        tokenId: PromiseOrValue<BigNumberish>,
        vaultId: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      "deposit(uint256,uint96)"(
        tokenId: PromiseOrValue<BigNumberish>,
        vaultId: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      depositedPositions(
        minter: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      "depositedPositions(address)"(
        minter: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      increaseAllowance(
        spender: PromiseOrValue<string>,
        addedValue: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      "increaseAllowance(address,uint256)"(
        spender: PromiseOrValue<string>,
        addedValue: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      initialize(
        name_: PromiseOrValue<string>,
        symbol_: PromiseOrValue<string>,
        underlying_: PromiseOrValue<string>,
        vaultController_: PromiseOrValue<string>,
        nftVaultController_: PromiseOrValue<string>,
        positionValuator_: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      "initialize(string,string,address,address,address,address)"(
        name_: PromiseOrValue<string>,
        symbol_: PromiseOrValue<string>,
        underlying_: PromiseOrValue<string>,
        vaultController_: PromiseOrValue<string>,
        nftVaultController_: PromiseOrValue<string>,
        positionValuator_: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      name(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      renounceOwnership(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      "renounceOwnership()"(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      transfer(
        recipient: PromiseOrValue<string>,
        positionIndex: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      "transfer(address,uint256)"(
        recipient: PromiseOrValue<string>,
        positionIndex: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      transferFrom(
        arg0: PromiseOrValue<string>,
        arg1: PromiseOrValue<string>,
        arg2: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      "transferFrom(address,address,uint256)"(
        arg0: PromiseOrValue<string>,
        arg1: PromiseOrValue<string>,
        arg2: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      "transferOwnership(address)"(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
    };
  }