/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
  } from "ethers";
  import type {
    FunctionFragment,
    Result,
    EventFragment,
  } from "@ethersproject/abi";
  import type { Listener, Provider } from "@ethersproject/providers";
  import type {
    TypedEventFilter,
    TypedEvent,
    TypedListener,
    OnEvent,
    PromiseOrValue,
  } from "../common";
  
  export declare namespace V3PositionValuator {
    export type VerifyDataStruct = {
      pool: PromiseOrValue<string>;
      tickLower: PromiseOrValue<BigNumberish>;
      tickUpper: PromiseOrValue<BigNumberish>;
      liquidity: PromiseOrValue<BigNumberish>;
    };
  
    export type VerifyDataStructOutput = [string, number, number, BigNumber] & {
      pool: string;
      tickLower: number;
      tickUpper: number;
      liquidity: BigNumber;
    };
  }
  
  export interface V3PositionValuatorInterface extends utils.Interface {
    functions: {
      "FACTORY_V3()": FunctionFragment;
      "currentValue()": FunctionFragment;
      "getValue(uint256)": FunctionFragment;
      "initialize(address,address)": FunctionFragment;
      "nfpManager()": FunctionFragment;
      "owner()": FunctionFragment;
      "poolDatas(address)": FunctionFragment;
      "registerPool(address,address,address)": FunctionFragment;
      "registeredPools(address)": FunctionFragment;
      "renounceOwnership()": FunctionFragment;
      "transferOwnership(address)": FunctionFragment;
      "verifyPool(uint256)": FunctionFragment;
    };
  
    getFunction(
      nameOrSignatureOrTopic:
        | "FACTORY_V3"
        | "FACTORY_V3()"
        | "currentValue"
        | "currentValue()"
        | "getValue"
        | "getValue(uint256)"
        | "initialize"
        | "initialize(address,address)"
        | "nfpManager"
        | "nfpManager()"
        | "owner"
        | "owner()"
        | "poolDatas"
        | "poolDatas(address)"
        | "registerPool"
        | "registerPool(address,address,address)"
        | "registeredPools"
        | "registeredPools(address)"
        | "renounceOwnership"
        | "renounceOwnership()"
        | "transferOwnership"
        | "transferOwnership(address)"
        | "verifyPool"
        | "verifyPool(uint256)"
    ): FunctionFragment;
  
    encodeFunctionData(
      functionFragment: "FACTORY_V3",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "FACTORY_V3()",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "currentValue",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "currentValue()",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "getValue",
      values: [PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
      functionFragment: "getValue(uint256)",
      values: [PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
      functionFragment: "initialize",
      values: [PromiseOrValue<string>, PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
      functionFragment: "initialize(address,address)",
      values: [PromiseOrValue<string>, PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
      functionFragment: "nfpManager",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "nfpManager()",
      values?: undefined
    ): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
    encodeFunctionData(
      functionFragment: "poolDatas",
      values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
      functionFragment: "poolDatas(address)",
      values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
      functionFragment: "registerPool",
      values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ]
    ): string;
    encodeFunctionData(
      functionFragment: "registerPool(address,address,address)",
      values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ]
    ): string;
    encodeFunctionData(
      functionFragment: "registeredPools",
      values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
      functionFragment: "registeredPools(address)",
      values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
      functionFragment: "renounceOwnership",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "renounceOwnership()",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "transferOwnership",
      values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
      functionFragment: "transferOwnership(address)",
      values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
      functionFragment: "verifyPool",
      values: [PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
      functionFragment: "verifyPool(uint256)",
      values: [PromiseOrValue<BigNumberish>]
    ): string;
  
    decodeFunctionResult(functionFragment: "FACTORY_V3", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "FACTORY_V3()",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "currentValue",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "currentValue()",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "getValue", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "getValue(uint256)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "initialize(address,address)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "nfpManager", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "nfpManager()",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "poolDatas", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "poolDatas(address)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "registerPool",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "registerPool(address,address,address)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "registeredPools",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "registeredPools(address)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "renounceOwnership",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "renounceOwnership()",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "transferOwnership",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "transferOwnership(address)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "verifyPool", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "verifyPool(uint256)",
      data: BytesLike
    ): Result;
  
    events: {
      "OwnershipTransferred(address,address)": EventFragment;
    };
  
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(
      nameOrSignatureOrTopic: "OwnershipTransferred(address,address)"
    ): EventFragment;
  }
  
  export interface OwnershipTransferredEventObject {
    previousOwner: string;
    newOwner: string;
  }
  export type OwnershipTransferredEvent = TypedEvent<
    [string, string],
    OwnershipTransferredEventObject
  >;
  
  export type OwnershipTransferredEventFilter =
    TypedEventFilter<OwnershipTransferredEvent>;
  
  export interface V3PositionValuator extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
  
    interface: V3PositionValuatorInterface;
  
    queryFilter<TEvent extends TypedEvent>(
      event: TypedEventFilter<TEvent>,
      fromBlockOrBlockhash?: string | number | undefined,
      toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;
  
    listeners<TEvent extends TypedEvent>(
      eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(
      eventFilter: TypedEventFilter<TEvent>
    ): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
  
    functions: {
      FACTORY_V3(overrides?: CallOverrides): Promise<[string]>;
  
      "FACTORY_V3()"(overrides?: CallOverrides): Promise<[string]>;
  
      currentValue(overrides?: CallOverrides): Promise<[BigNumber]>;
  
      "currentValue()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  
      getValue(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<[BigNumber]>;
  
      "getValue(uint256)"(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<[BigNumber]>;
  
      initialize(
        _nfpManager: PromiseOrValue<string>,
        _factoryV3: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      "initialize(address,address)"(
        _nfpManager: PromiseOrValue<string>,
        _factoryV3: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      nfpManager(overrides?: CallOverrides): Promise<[string]>;
  
      "nfpManager()"(overrides?: CallOverrides): Promise<[string]>;
  
      owner(overrides?: CallOverrides): Promise<[string]>;
  
      "owner()"(overrides?: CallOverrides): Promise<[string]>;
  
      poolDatas(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<
        [string, string, BigNumber, BigNumber] & {
          token0Oracle: string;
          token1Oracle: string;
          UNIT_0: BigNumber;
          UNIT_1: BigNumber;
        }
      >;
  
      "poolDatas(address)"(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<
        [string, string, BigNumber, BigNumber] & {
          token0Oracle: string;
          token1Oracle: string;
          UNIT_0: BigNumber;
          UNIT_1: BigNumber;
        }
      >;
  
      registerPool(
        pool: PromiseOrValue<string>,
        _token0Oracle: PromiseOrValue<string>,
        _token1Oracle: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      "registerPool(address,address,address)"(
        pool: PromiseOrValue<string>,
        _token0Oracle: PromiseOrValue<string>,
        _token1Oracle: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      registeredPools(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<[boolean]>;
  
      "registeredPools(address)"(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<[boolean]>;
  
      renounceOwnership(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      "renounceOwnership()"(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      "transferOwnership(address)"(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      verifyPool(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<[V3PositionValuator.VerifyDataStructOutput]>;
  
      "verifyPool(uint256)"(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<[V3PositionValuator.VerifyDataStructOutput]>;
    };
  
    FACTORY_V3(overrides?: CallOverrides): Promise<string>;
  
    "FACTORY_V3()"(overrides?: CallOverrides): Promise<string>;
  
    currentValue(overrides?: CallOverrides): Promise<BigNumber>;
  
    "currentValue()"(overrides?: CallOverrides): Promise<BigNumber>;
  
    getValue(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  
    "getValue(uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  
    initialize(
      _nfpManager: PromiseOrValue<string>,
      _factoryV3: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    "initialize(address,address)"(
      _nfpManager: PromiseOrValue<string>,
      _factoryV3: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    nfpManager(overrides?: CallOverrides): Promise<string>;
  
    "nfpManager()"(overrides?: CallOverrides): Promise<string>;
  
    owner(overrides?: CallOverrides): Promise<string>;
  
    "owner()"(overrides?: CallOverrides): Promise<string>;
  
    poolDatas(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        token0Oracle: string;
        token1Oracle: string;
        UNIT_0: BigNumber;
        UNIT_1: BigNumber;
      }
    >;
  
    "poolDatas(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        token0Oracle: string;
        token1Oracle: string;
        UNIT_0: BigNumber;
        UNIT_1: BigNumber;
      }
    >;
  
    registerPool(
      pool: PromiseOrValue<string>,
      _token0Oracle: PromiseOrValue<string>,
      _token1Oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    "registerPool(address,address,address)"(
      pool: PromiseOrValue<string>,
      _token0Oracle: PromiseOrValue<string>,
      _token1Oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    registeredPools(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  
    "registeredPools(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  
    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    verifyPool(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<V3PositionValuator.VerifyDataStructOutput>;
  
    "verifyPool(uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<V3PositionValuator.VerifyDataStructOutput>;
  
    callStatic: {
      FACTORY_V3(overrides?: CallOverrides): Promise<string>;
  
      "FACTORY_V3()"(overrides?: CallOverrides): Promise<string>;
  
      currentValue(overrides?: CallOverrides): Promise<BigNumber>;
  
      "currentValue()"(overrides?: CallOverrides): Promise<BigNumber>;
  
      getValue(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "getValue(uint256)"(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      initialize(
        _nfpManager: PromiseOrValue<string>,
        _factoryV3: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<void>;
  
      "initialize(address,address)"(
        _nfpManager: PromiseOrValue<string>,
        _factoryV3: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<void>;
  
      nfpManager(overrides?: CallOverrides): Promise<string>;
  
      "nfpManager()"(overrides?: CallOverrides): Promise<string>;
  
      owner(overrides?: CallOverrides): Promise<string>;
  
      "owner()"(overrides?: CallOverrides): Promise<string>;
  
      poolDatas(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<
        [string, string, BigNumber, BigNumber] & {
          token0Oracle: string;
          token1Oracle: string;
          UNIT_0: BigNumber;
          UNIT_1: BigNumber;
        }
      >;
  
      "poolDatas(address)"(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<
        [string, string, BigNumber, BigNumber] & {
          token0Oracle: string;
          token1Oracle: string;
          UNIT_0: BigNumber;
          UNIT_1: BigNumber;
        }
      >;
  
      registerPool(
        pool: PromiseOrValue<string>,
        _token0Oracle: PromiseOrValue<string>,
        _token1Oracle: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<void>;
  
      "registerPool(address,address,address)"(
        pool: PromiseOrValue<string>,
        _token0Oracle: PromiseOrValue<string>,
        _token1Oracle: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<void>;
  
      registeredPools(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<boolean>;
  
      "registeredPools(address)"(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<boolean>;
  
      renounceOwnership(overrides?: CallOverrides): Promise<void>;
  
      "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;
  
      transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<void>;
  
      "transferOwnership(address)"(
        newOwner: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<void>;
  
      verifyPool(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<V3PositionValuator.VerifyDataStructOutput>;
  
      "verifyPool(uint256)"(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<V3PositionValuator.VerifyDataStructOutput>;
    };
  
    filters: {
      "OwnershipTransferred(address,address)"(
        previousOwner?: PromiseOrValue<string> | null,
        newOwner?: PromiseOrValue<string> | null
      ): OwnershipTransferredEventFilter;
      OwnershipTransferred(
        previousOwner?: PromiseOrValue<string> | null,
        newOwner?: PromiseOrValue<string> | null
      ): OwnershipTransferredEventFilter;
    };
  
    estimateGas: {
      FACTORY_V3(overrides?: CallOverrides): Promise<BigNumber>;
  
      "FACTORY_V3()"(overrides?: CallOverrides): Promise<BigNumber>;
  
      currentValue(overrides?: CallOverrides): Promise<BigNumber>;
  
      "currentValue()"(overrides?: CallOverrides): Promise<BigNumber>;
  
      getValue(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "getValue(uint256)"(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      initialize(
        _nfpManager: PromiseOrValue<string>,
        _factoryV3: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      "initialize(address,address)"(
        _nfpManager: PromiseOrValue<string>,
        _factoryV3: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      nfpManager(overrides?: CallOverrides): Promise<BigNumber>;
  
      "nfpManager()"(overrides?: CallOverrides): Promise<BigNumber>;
  
      owner(overrides?: CallOverrides): Promise<BigNumber>;
  
      "owner()"(overrides?: CallOverrides): Promise<BigNumber>;
  
      poolDatas(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "poolDatas(address)"(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      registerPool(
        pool: PromiseOrValue<string>,
        _token0Oracle: PromiseOrValue<string>,
        _token1Oracle: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      "registerPool(address,address,address)"(
        pool: PromiseOrValue<string>,
        _token0Oracle: PromiseOrValue<string>,
        _token1Oracle: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      registeredPools(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "registeredPools(address)"(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      renounceOwnership(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      "renounceOwnership()"(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      "transferOwnership(address)"(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      verifyPool(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "verifyPool(uint256)"(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
    };
  
    populateTransaction: {
      FACTORY_V3(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      "FACTORY_V3()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      currentValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      "currentValue()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      getValue(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      "getValue(uint256)"(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      initialize(
        _nfpManager: PromiseOrValue<string>,
        _factoryV3: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      "initialize(address,address)"(
        _nfpManager: PromiseOrValue<string>,
        _factoryV3: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      nfpManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      "nfpManager()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      poolDatas(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      "poolDatas(address)"(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      registerPool(
        pool: PromiseOrValue<string>,
        _token0Oracle: PromiseOrValue<string>,
        _token1Oracle: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      "registerPool(address,address,address)"(
        pool: PromiseOrValue<string>,
        _token0Oracle: PromiseOrValue<string>,
        _token1Oracle: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      registeredPools(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      "registeredPools(address)"(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      renounceOwnership(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      "renounceOwnership()"(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      "transferOwnership(address)"(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      verifyPool(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      "verifyPool(uint256)"(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
    };
  }