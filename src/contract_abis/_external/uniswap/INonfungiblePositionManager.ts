/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
  } from "ethers";
  import type {
    FunctionFragment,
    Result,
    EventFragment,
  } from "@ethersproject/abi";
  import type { Listener, Provider } from "@ethersproject/providers";
  import type {
    TypedEventFilter,
    TypedEvent,
    TypedListener,
    OnEvent,
    PromiseOrValue,
  } from "../../common";
  
  export declare namespace INonfungiblePositionManager {
    export type CollectParamsStruct = {
      tokenId: PromiseOrValue<BigNumberish>;
      recipient: PromiseOrValue<string>;
      amount0Max: PromiseOrValue<BigNumberish>;
      amount1Max: PromiseOrValue<BigNumberish>;
    };
  
    export type CollectParamsStructOutput = [
      BigNumber,
      string,
      BigNumber,
      BigNumber
    ] & {
      tokenId: BigNumber;
      recipient: string;
      amount0Max: BigNumber;
      amount1Max: BigNumber;
    };
  
    export type DecreaseLiquidityParamsStruct = {
      tokenId: PromiseOrValue<BigNumberish>;
      liquidity: PromiseOrValue<BigNumberish>;
      amount0Min: PromiseOrValue<BigNumberish>;
      amount1Min: PromiseOrValue<BigNumberish>;
      deadline: PromiseOrValue<BigNumberish>;
    };
  
    export type DecreaseLiquidityParamsStructOutput = [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      tokenId: BigNumber;
      liquidity: BigNumber;
      amount0Min: BigNumber;
      amount1Min: BigNumber;
      deadline: BigNumber;
    };
  
    export type IncreaseLiquidityParamsStruct = {
      tokenId: PromiseOrValue<BigNumberish>;
      amount0Desired: PromiseOrValue<BigNumberish>;
      amount1Desired: PromiseOrValue<BigNumberish>;
      amount0Min: PromiseOrValue<BigNumberish>;
      amount1Min: PromiseOrValue<BigNumberish>;
      deadline: PromiseOrValue<BigNumberish>;
    };
  
    export type IncreaseLiquidityParamsStructOutput = [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      tokenId: BigNumber;
      amount0Desired: BigNumber;
      amount1Desired: BigNumber;
      amount0Min: BigNumber;
      amount1Min: BigNumber;
      deadline: BigNumber;
    };
  
    export type MintParamsStruct = {
      token0: PromiseOrValue<string>;
      token1: PromiseOrValue<string>;
      fee: PromiseOrValue<BigNumberish>;
      tickLower: PromiseOrValue<BigNumberish>;
      tickUpper: PromiseOrValue<BigNumberish>;
      amount0Desired: PromiseOrValue<BigNumberish>;
      amount1Desired: PromiseOrValue<BigNumberish>;
      amount0Min: PromiseOrValue<BigNumberish>;
      amount1Min: PromiseOrValue<BigNumberish>;
      recipient: PromiseOrValue<string>;
      deadline: PromiseOrValue<BigNumberish>;
    };
  
    export type MintParamsStructOutput = [
      string,
      string,
      number,
      number,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber
    ] & {
      token0: string;
      token1: string;
      fee: number;
      tickLower: number;
      tickUpper: number;
      amount0Desired: BigNumber;
      amount1Desired: BigNumber;
      amount0Min: BigNumber;
      amount1Min: BigNumber;
      recipient: string;
      deadline: BigNumber;
    };
  }
  
  export interface INonfungiblePositionManagerInterface extends utils.Interface {
    functions: {
      "approve(address,uint256)": FunctionFragment;
      "balanceOf(address)": FunctionFragment;
      "burn(uint256)": FunctionFragment;
      "collect((uint256,address,uint128,uint128))": FunctionFragment;
      "decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))": FunctionFragment;
      "getApproved(uint256)": FunctionFragment;
      "increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
      "isApprovedForAll(address,address)": FunctionFragment;
      "mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))": FunctionFragment;
      "ownerOf(uint256)": FunctionFragment;
      "positions(uint256)": FunctionFragment;
      "safeTransferFrom(address,address,uint256)": FunctionFragment;
      "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
      "setApprovalForAll(address,bool)": FunctionFragment;
      "transferFrom(address,address,uint256)": FunctionFragment;
    };
  
    getFunction(
      nameOrSignatureOrTopic:
        | "approve"
        | "approve(address,uint256)"
        | "balanceOf"
        | "balanceOf(address)"
        | "burn"
        | "burn(uint256)"
        | "collect"
        | "collect((uint256,address,uint128,uint128))"
        | "decreaseLiquidity"
        | "decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))"
        | "getApproved"
        | "getApproved(uint256)"
        | "increaseLiquidity"
        | "increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))"
        | "isApprovedForAll"
        | "isApprovedForAll(address,address)"
        | "mint"
        | "mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))"
        | "ownerOf"
        | "ownerOf(uint256)"
        | "positions"
        | "positions(uint256)"
        | "safeTransferFrom(address,address,uint256)"
        | "safeTransferFrom(address,address,uint256,bytes)"
        | "setApprovalForAll"
        | "setApprovalForAll(address,bool)"
        | "transferFrom"
        | "transferFrom(address,address,uint256)"
    ): FunctionFragment;
  
    encodeFunctionData(
      functionFragment: "approve",
      values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
      functionFragment: "approve(address,uint256)",
      values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
      functionFragment: "balanceOf",
      values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
      functionFragment: "balanceOf(address)",
      values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
      functionFragment: "burn",
      values: [PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
      functionFragment: "burn(uint256)",
      values: [PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
      functionFragment: "collect",
      values: [INonfungiblePositionManager.CollectParamsStruct]
    ): string;
    encodeFunctionData(
      functionFragment: "collect((uint256,address,uint128,uint128))",
      values: [INonfungiblePositionManager.CollectParamsStruct]
    ): string;
    encodeFunctionData(
      functionFragment: "decreaseLiquidity",
      values: [INonfungiblePositionManager.DecreaseLiquidityParamsStruct]
    ): string;
    encodeFunctionData(
      functionFragment: "decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))",
      values: [INonfungiblePositionManager.DecreaseLiquidityParamsStruct]
    ): string;
    encodeFunctionData(
      functionFragment: "getApproved",
      values: [PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
      functionFragment: "getApproved(uint256)",
      values: [PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
      functionFragment: "increaseLiquidity",
      values: [INonfungiblePositionManager.IncreaseLiquidityParamsStruct]
    ): string;
    encodeFunctionData(
      functionFragment: "increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))",
      values: [INonfungiblePositionManager.IncreaseLiquidityParamsStruct]
    ): string;
    encodeFunctionData(
      functionFragment: "isApprovedForAll",
      values: [PromiseOrValue<string>, PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
      functionFragment: "isApprovedForAll(address,address)",
      values: [PromiseOrValue<string>, PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
      functionFragment: "mint",
      values: [INonfungiblePositionManager.MintParamsStruct]
    ): string;
    encodeFunctionData(
      functionFragment: "mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))",
      values: [INonfungiblePositionManager.MintParamsStruct]
    ): string;
    encodeFunctionData(
      functionFragment: "ownerOf",
      values: [PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
      functionFragment: "ownerOf(uint256)",
      values: [PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
      functionFragment: "positions",
      values: [PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
      functionFragment: "positions(uint256)",
      values: [PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
      functionFragment: "safeTransferFrom(address,address,uint256)",
      values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
      ]
    ): string;
    encodeFunctionData(
      functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
      values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
      ]
    ): string;
    encodeFunctionData(
      functionFragment: "setApprovalForAll",
      values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
    ): string;
    encodeFunctionData(
      functionFragment: "setApprovalForAll(address,bool)",
      values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
    ): string;
    encodeFunctionData(
      functionFragment: "transferFrom",
      values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
      ]
    ): string;
    encodeFunctionData(
      functionFragment: "transferFrom(address,address,uint256)",
      values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
      ]
    ): string;
  
    decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "approve(address,uint256)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "balanceOf(address)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "burn(uint256)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "collect((uint256,address,uint128,uint128))",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "decreaseLiquidity",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "getApproved",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "getApproved(uint256)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "increaseLiquidity",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "isApprovedForAll",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "isApprovedForAll(address,address)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "ownerOf(uint256)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "positions(uint256)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "safeTransferFrom(address,address,uint256)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "setApprovalForAll",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "setApprovalForAll(address,bool)",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "transferFrom",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "transferFrom(address,address,uint256)",
      data: BytesLike
    ): Result;
  
    events: {
      "Approval(address,address,uint256)": EventFragment;
      "ApprovalForAll(address,address,bool)": EventFragment;
      "Collect(uint256,address,uint256,uint256)": EventFragment;
      "DecreaseLiquidity(uint256,uint128,uint256,uint256)": EventFragment;
      "IncreaseLiquidity(uint256,uint128,uint256,uint256)": EventFragment;
      "Transfer(address,address,uint256)": EventFragment;
    };
  
    getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
    getEvent(
      nameOrSignatureOrTopic: "Approval(address,address,uint256)"
    ): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
    getEvent(
      nameOrSignatureOrTopic: "ApprovalForAll(address,address,bool)"
    ): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Collect"): EventFragment;
    getEvent(
      nameOrSignatureOrTopic: "Collect(uint256,address,uint256,uint256)"
    ): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DecreaseLiquidity"): EventFragment;
    getEvent(
      nameOrSignatureOrTopic: "DecreaseLiquidity(uint256,uint128,uint256,uint256)"
    ): EventFragment;
    getEvent(nameOrSignatureOrTopic: "IncreaseLiquidity"): EventFragment;
    getEvent(
      nameOrSignatureOrTopic: "IncreaseLiquidity(uint256,uint128,uint256,uint256)"
    ): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
    getEvent(
      nameOrSignatureOrTopic: "Transfer(address,address,uint256)"
    ): EventFragment;
  }
  
  export interface ApprovalEventObject {
    owner: string;
    approved: string;
    tokenId: BigNumber;
  }
  export type ApprovalEvent = TypedEvent<
    [string, string, BigNumber],
    ApprovalEventObject
  >;
  
  export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;
  
  export interface ApprovalForAllEventObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type ApprovalForAllEvent = TypedEvent<
    [string, string, boolean],
    ApprovalForAllEventObject
  >;
  
  export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;
  
  export interface CollectEventObject {
    tokenId: BigNumber;
    recipient: string;
    amount0: BigNumber;
    amount1: BigNumber;
  }
  export type CollectEvent = TypedEvent<
    [BigNumber, string, BigNumber, BigNumber],
    CollectEventObject
  >;
  
  export type CollectEventFilter = TypedEventFilter<CollectEvent>;
  
  export interface DecreaseLiquidityEventObject {
    tokenId: BigNumber;
    liquidity: BigNumber;
    amount0: BigNumber;
    amount1: BigNumber;
  }
  export type DecreaseLiquidityEvent = TypedEvent<
    [BigNumber, BigNumber, BigNumber, BigNumber],
    DecreaseLiquidityEventObject
  >;
  
  export type DecreaseLiquidityEventFilter =
    TypedEventFilter<DecreaseLiquidityEvent>;
  
  export interface IncreaseLiquidityEventObject {
    tokenId: BigNumber;
    liquidity: BigNumber;
    amount0: BigNumber;
    amount1: BigNumber;
  }
  export type IncreaseLiquidityEvent = TypedEvent<
    [BigNumber, BigNumber, BigNumber, BigNumber],
    IncreaseLiquidityEventObject
  >;
  
  export type IncreaseLiquidityEventFilter =
    TypedEventFilter<IncreaseLiquidityEvent>;
  
  export interface TransferEventObject {
    from: string;
    to: string;
    tokenId: BigNumber;
  }
  export type TransferEvent = TypedEvent<
    [string, string, BigNumber],
    TransferEventObject
  >;
  
  export type TransferEventFilter = TypedEventFilter<TransferEvent>;
  
  export interface INonfungiblePositionManager extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
  
    interface: INonfungiblePositionManagerInterface;
  
    queryFilter<TEvent extends TypedEvent>(
      event: TypedEventFilter<TEvent>,
      fromBlockOrBlockhash?: string | number | undefined,
      toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;
  
    listeners<TEvent extends TypedEvent>(
      eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(
      eventFilter: TypedEventFilter<TEvent>
    ): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
  
    functions: {
      approve(
        to: PromiseOrValue<string>,
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      "approve(address,uint256)"(
        to: PromiseOrValue<string>,
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      balanceOf(
        owner: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<[BigNumber] & { balance: BigNumber }>;
  
      "balanceOf(address)"(
        owner: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<[BigNumber] & { balance: BigNumber }>;
  
      burn(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      "burn(uint256)"(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      collect(
        params: INonfungiblePositionManager.CollectParamsStruct,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      "collect((uint256,address,uint128,uint128))"(
        params: INonfungiblePositionManager.CollectParamsStruct,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      decreaseLiquidity(
        params: INonfungiblePositionManager.DecreaseLiquidityParamsStruct,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      "decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))"(
        params: INonfungiblePositionManager.DecreaseLiquidityParamsStruct,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      getApproved(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<[string] & { operator: string }>;
  
      "getApproved(uint256)"(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<[string] & { operator: string }>;
  
      increaseLiquidity(
        params: INonfungiblePositionManager.IncreaseLiquidityParamsStruct,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      "increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))"(
        params: INonfungiblePositionManager.IncreaseLiquidityParamsStruct,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      isApprovedForAll(
        owner: PromiseOrValue<string>,
        operator: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<[boolean]>;
  
      "isApprovedForAll(address,address)"(
        owner: PromiseOrValue<string>,
        operator: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<[boolean]>;
  
      mint(
        params: INonfungiblePositionManager.MintParamsStruct,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      "mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))"(
        params: INonfungiblePositionManager.MintParamsStruct,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      ownerOf(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<[string] & { owner: string }>;
  
      "ownerOf(uint256)"(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<[string] & { owner: string }>;
  
      positions(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<
        [
          BigNumber,
          string,
          string,
          string,
          number,
          number,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          nonce: BigNumber;
          operator: string;
          token0: string;
          token1: string;
          fee: number;
          tickLower: number;
          tickUpper: number;
          liquidity: BigNumber;
          feeGrowthInside0LastX128: BigNumber;
          feeGrowthInside1LastX128: BigNumber;
          tokensOwed0: BigNumber;
          tokensOwed1: BigNumber;
        }
      >;
  
      "positions(uint256)"(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<
        [
          BigNumber,
          string,
          string,
          string,
          number,
          number,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          nonce: BigNumber;
          operator: string;
          token0: string;
          token1: string;
          fee: number;
          tickLower: number;
          tickUpper: number;
          liquidity: BigNumber;
          feeGrowthInside0LastX128: BigNumber;
          feeGrowthInside1LastX128: BigNumber;
          tokensOwed0: BigNumber;
          tokensOwed1: BigNumber;
        }
      >;
  
      "safeTransferFrom(address,address,uint256)"(
        from: PromiseOrValue<string>,
        to: PromiseOrValue<string>,
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      "safeTransferFrom(address,address,uint256,bytes)"(
        from: PromiseOrValue<string>,
        to: PromiseOrValue<string>,
        tokenId: PromiseOrValue<BigNumberish>,
        data: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      setApprovalForAll(
        operator: PromiseOrValue<string>,
        _approved: PromiseOrValue<boolean>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      "setApprovalForAll(address,bool)"(
        operator: PromiseOrValue<string>,
        _approved: PromiseOrValue<boolean>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      transferFrom(
        from: PromiseOrValue<string>,
        to: PromiseOrValue<string>,
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
  
      "transferFrom(address,address,uint256)"(
        from: PromiseOrValue<string>,
        to: PromiseOrValue<string>,
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<ContractTransaction>;
    };
  
    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    "approve(address,uint256)"(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  
    "balanceOf(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  
    burn(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    "burn(uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    collect(
      params: INonfungiblePositionManager.CollectParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    "collect((uint256,address,uint128,uint128))"(
      params: INonfungiblePositionManager.CollectParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    decreaseLiquidity(
      params: INonfungiblePositionManager.DecreaseLiquidityParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    "decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))"(
      params: INonfungiblePositionManager.DecreaseLiquidityParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  
    "getApproved(uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  
    increaseLiquidity(
      params: INonfungiblePositionManager.IncreaseLiquidityParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    "increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))"(
      params: INonfungiblePositionManager.IncreaseLiquidityParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  
    "isApprovedForAll(address,address)"(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  
    mint(
      params: INonfungiblePositionManager.MintParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    "mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))"(
      params: INonfungiblePositionManager.MintParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  
    "ownerOf(uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  
    positions(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        number,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        nonce: BigNumber;
        operator: string;
        token0: string;
        token1: string;
        fee: number;
        tickLower: number;
        tickUpper: number;
        liquidity: BigNumber;
        feeGrowthInside0LastX128: BigNumber;
        feeGrowthInside1LastX128: BigNumber;
        tokensOwed0: BigNumber;
        tokensOwed1: BigNumber;
      }
    >;
  
    "positions(uint256)"(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        number,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        nonce: BigNumber;
        operator: string;
        token0: string;
        token1: string;
        fee: number;
        tickLower: number;
        tickUpper: number;
        liquidity: BigNumber;
        feeGrowthInside0LastX128: BigNumber;
        feeGrowthInside1LastX128: BigNumber;
        tokensOwed0: BigNumber;
        tokensOwed1: BigNumber;
      }
    >;
  
    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    setApprovalForAll(
      operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    "setApprovalForAll(address,bool)"(
      operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    "transferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  
    callStatic: {
      approve(
        to: PromiseOrValue<string>,
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<void>;
  
      "approve(address,uint256)"(
        to: PromiseOrValue<string>,
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<void>;
  
      balanceOf(
        owner: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "balanceOf(address)"(
        owner: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      burn(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<void>;
  
      "burn(uint256)"(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<void>;
  
      collect(
        params: INonfungiblePositionManager.CollectParamsStruct,
        overrides?: CallOverrides
      ): Promise<
        [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
      >;
  
      "collect((uint256,address,uint128,uint128))"(
        params: INonfungiblePositionManager.CollectParamsStruct,
        overrides?: CallOverrides
      ): Promise<
        [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
      >;
  
      decreaseLiquidity(
        params: INonfungiblePositionManager.DecreaseLiquidityParamsStruct,
        overrides?: CallOverrides
      ): Promise<
        [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
      >;
  
      "decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))"(
        params: INonfungiblePositionManager.DecreaseLiquidityParamsStruct,
        overrides?: CallOverrides
      ): Promise<
        [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
      >;
  
      getApproved(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<string>;
  
      "getApproved(uint256)"(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<string>;
  
      increaseLiquidity(
        params: INonfungiblePositionManager.IncreaseLiquidityParamsStruct,
        overrides?: CallOverrides
      ): Promise<
        [BigNumber, BigNumber, BigNumber] & {
          liquidity: BigNumber;
          amount0: BigNumber;
          amount1: BigNumber;
        }
      >;
  
      "increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))"(
        params: INonfungiblePositionManager.IncreaseLiquidityParamsStruct,
        overrides?: CallOverrides
      ): Promise<
        [BigNumber, BigNumber, BigNumber] & {
          liquidity: BigNumber;
          amount0: BigNumber;
          amount1: BigNumber;
        }
      >;
  
      isApprovedForAll(
        owner: PromiseOrValue<string>,
        operator: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<boolean>;
  
      "isApprovedForAll(address,address)"(
        owner: PromiseOrValue<string>,
        operator: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<boolean>;
  
      mint(
        params: INonfungiblePositionManager.MintParamsStruct,
        overrides?: CallOverrides
      ): Promise<
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          tokenId: BigNumber;
          liquidity: BigNumber;
          amount0: BigNumber;
          amount1: BigNumber;
        }
      >;
  
      "mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))"(
        params: INonfungiblePositionManager.MintParamsStruct,
        overrides?: CallOverrides
      ): Promise<
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          tokenId: BigNumber;
          liquidity: BigNumber;
          amount0: BigNumber;
          amount1: BigNumber;
        }
      >;
  
      ownerOf(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<string>;
  
      "ownerOf(uint256)"(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<string>;
  
      positions(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<
        [
          BigNumber,
          string,
          string,
          string,
          number,
          number,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          nonce: BigNumber;
          operator: string;
          token0: string;
          token1: string;
          fee: number;
          tickLower: number;
          tickUpper: number;
          liquidity: BigNumber;
          feeGrowthInside0LastX128: BigNumber;
          feeGrowthInside1LastX128: BigNumber;
          tokensOwed0: BigNumber;
          tokensOwed1: BigNumber;
        }
      >;
  
      "positions(uint256)"(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<
        [
          BigNumber,
          string,
          string,
          string,
          number,
          number,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          nonce: BigNumber;
          operator: string;
          token0: string;
          token1: string;
          fee: number;
          tickLower: number;
          tickUpper: number;
          liquidity: BigNumber;
          feeGrowthInside0LastX128: BigNumber;
          feeGrowthInside1LastX128: BigNumber;
          tokensOwed0: BigNumber;
          tokensOwed1: BigNumber;
        }
      >;
  
      "safeTransferFrom(address,address,uint256)"(
        from: PromiseOrValue<string>,
        to: PromiseOrValue<string>,
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<void>;
  
      "safeTransferFrom(address,address,uint256,bytes)"(
        from: PromiseOrValue<string>,
        to: PromiseOrValue<string>,
        tokenId: PromiseOrValue<BigNumberish>,
        data: PromiseOrValue<BytesLike>,
        overrides?: CallOverrides
      ): Promise<void>;
  
      setApprovalForAll(
        operator: PromiseOrValue<string>,
        _approved: PromiseOrValue<boolean>,
        overrides?: CallOverrides
      ): Promise<void>;
  
      "setApprovalForAll(address,bool)"(
        operator: PromiseOrValue<string>,
        _approved: PromiseOrValue<boolean>,
        overrides?: CallOverrides
      ): Promise<void>;
  
      transferFrom(
        from: PromiseOrValue<string>,
        to: PromiseOrValue<string>,
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<void>;
  
      "transferFrom(address,address,uint256)"(
        from: PromiseOrValue<string>,
        to: PromiseOrValue<string>,
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<void>;
    };
  
    filters: {
      "Approval(address,address,uint256)"(
        owner?: PromiseOrValue<string> | null,
        approved?: PromiseOrValue<string> | null,
        tokenId?: PromiseOrValue<BigNumberish> | null
      ): ApprovalEventFilter;
      Approval(
        owner?: PromiseOrValue<string> | null,
        approved?: PromiseOrValue<string> | null,
        tokenId?: PromiseOrValue<BigNumberish> | null
      ): ApprovalEventFilter;
  
      "ApprovalForAll(address,address,bool)"(
        owner?: PromiseOrValue<string> | null,
        operator?: PromiseOrValue<string> | null,
        approved?: null
      ): ApprovalForAllEventFilter;
      ApprovalForAll(
        owner?: PromiseOrValue<string> | null,
        operator?: PromiseOrValue<string> | null,
        approved?: null
      ): ApprovalForAllEventFilter;
  
      "Collect(uint256,address,uint256,uint256)"(
        tokenId?: PromiseOrValue<BigNumberish> | null,
        recipient?: null,
        amount0?: null,
        amount1?: null
      ): CollectEventFilter;
      Collect(
        tokenId?: PromiseOrValue<BigNumberish> | null,
        recipient?: null,
        amount0?: null,
        amount1?: null
      ): CollectEventFilter;
  
      "DecreaseLiquidity(uint256,uint128,uint256,uint256)"(
        tokenId?: PromiseOrValue<BigNumberish> | null,
        liquidity?: null,
        amount0?: null,
        amount1?: null
      ): DecreaseLiquidityEventFilter;
      DecreaseLiquidity(
        tokenId?: PromiseOrValue<BigNumberish> | null,
        liquidity?: null,
        amount0?: null,
        amount1?: null
      ): DecreaseLiquidityEventFilter;
  
      "IncreaseLiquidity(uint256,uint128,uint256,uint256)"(
        tokenId?: PromiseOrValue<BigNumberish> | null,
        liquidity?: null,
        amount0?: null,
        amount1?: null
      ): IncreaseLiquidityEventFilter;
      IncreaseLiquidity(
        tokenId?: PromiseOrValue<BigNumberish> | null,
        liquidity?: null,
        amount0?: null,
        amount1?: null
      ): IncreaseLiquidityEventFilter;
  
      "Transfer(address,address,uint256)"(
        from?: PromiseOrValue<string> | null,
        to?: PromiseOrValue<string> | null,
        tokenId?: PromiseOrValue<BigNumberish> | null
      ): TransferEventFilter;
      Transfer(
        from?: PromiseOrValue<string> | null,
        to?: PromiseOrValue<string> | null,
        tokenId?: PromiseOrValue<BigNumberish> | null
      ): TransferEventFilter;
    };
  
    estimateGas: {
      approve(
        to: PromiseOrValue<string>,
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      "approve(address,uint256)"(
        to: PromiseOrValue<string>,
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      balanceOf(
        owner: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "balanceOf(address)"(
        owner: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      burn(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      "burn(uint256)"(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      collect(
        params: INonfungiblePositionManager.CollectParamsStruct,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      "collect((uint256,address,uint128,uint128))"(
        params: INonfungiblePositionManager.CollectParamsStruct,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      decreaseLiquidity(
        params: INonfungiblePositionManager.DecreaseLiquidityParamsStruct,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      "decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))"(
        params: INonfungiblePositionManager.DecreaseLiquidityParamsStruct,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      getApproved(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "getApproved(uint256)"(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      increaseLiquidity(
        params: INonfungiblePositionManager.IncreaseLiquidityParamsStruct,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      "increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))"(
        params: INonfungiblePositionManager.IncreaseLiquidityParamsStruct,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      isApprovedForAll(
        owner: PromiseOrValue<string>,
        operator: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "isApprovedForAll(address,address)"(
        owner: PromiseOrValue<string>,
        operator: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      mint(
        params: INonfungiblePositionManager.MintParamsStruct,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      "mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))"(
        params: INonfungiblePositionManager.MintParamsStruct,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      ownerOf(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "ownerOf(uint256)"(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      positions(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "positions(uint256)"(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "safeTransferFrom(address,address,uint256)"(
        from: PromiseOrValue<string>,
        to: PromiseOrValue<string>,
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      "safeTransferFrom(address,address,uint256,bytes)"(
        from: PromiseOrValue<string>,
        to: PromiseOrValue<string>,
        tokenId: PromiseOrValue<BigNumberish>,
        data: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      setApprovalForAll(
        operator: PromiseOrValue<string>,
        _approved: PromiseOrValue<boolean>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      "setApprovalForAll(address,bool)"(
        operator: PromiseOrValue<string>,
        _approved: PromiseOrValue<boolean>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      transferFrom(
        from: PromiseOrValue<string>,
        to: PromiseOrValue<string>,
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
  
      "transferFrom(address,address,uint256)"(
        from: PromiseOrValue<string>,
        to: PromiseOrValue<string>,
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<BigNumber>;
    };
  
    populateTransaction: {
      approve(
        to: PromiseOrValue<string>,
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      "approve(address,uint256)"(
        to: PromiseOrValue<string>,
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      balanceOf(
        owner: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      "balanceOf(address)"(
        owner: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      burn(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      "burn(uint256)"(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      collect(
        params: INonfungiblePositionManager.CollectParamsStruct,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      "collect((uint256,address,uint128,uint128))"(
        params: INonfungiblePositionManager.CollectParamsStruct,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      decreaseLiquidity(
        params: INonfungiblePositionManager.DecreaseLiquidityParamsStruct,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      "decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))"(
        params: INonfungiblePositionManager.DecreaseLiquidityParamsStruct,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      getApproved(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      "getApproved(uint256)"(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      increaseLiquidity(
        params: INonfungiblePositionManager.IncreaseLiquidityParamsStruct,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      "increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))"(
        params: INonfungiblePositionManager.IncreaseLiquidityParamsStruct,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      isApprovedForAll(
        owner: PromiseOrValue<string>,
        operator: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      "isApprovedForAll(address,address)"(
        owner: PromiseOrValue<string>,
        operator: PromiseOrValue<string>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      mint(
        params: INonfungiblePositionManager.MintParamsStruct,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      "mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))"(
        params: INonfungiblePositionManager.MintParamsStruct,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      ownerOf(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      "ownerOf(uint256)"(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      positions(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      "positions(uint256)"(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      "safeTransferFrom(address,address,uint256)"(
        from: PromiseOrValue<string>,
        to: PromiseOrValue<string>,
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      "safeTransferFrom(address,address,uint256,bytes)"(
        from: PromiseOrValue<string>,
        to: PromiseOrValue<string>,
        tokenId: PromiseOrValue<BigNumberish>,
        data: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      setApprovalForAll(
        operator: PromiseOrValue<string>,
        _approved: PromiseOrValue<boolean>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      "setApprovalForAll(address,bool)"(
        operator: PromiseOrValue<string>,
        _approved: PromiseOrValue<boolean>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      transferFrom(
        from: PromiseOrValue<string>,
        to: PromiseOrValue<string>,
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
  
      "transferFrom(address,address,uint256)"(
        from: PromiseOrValue<string>,
        to: PromiseOrValue<string>,
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
      ): Promise<PopulatedTransaction>;
    };
  }