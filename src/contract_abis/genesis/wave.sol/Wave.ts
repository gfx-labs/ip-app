/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface WaveInterface extends utils.Interface {
  functions: {
    "_disableTime()": FunctionFragment;
    "_enableTime()": FunctionFragment;
    "_floor()": FunctionFragment;
    "_receiver()": FunctionFragment;
    "_totalClaimed()": FunctionFragment;
    "_totalReward()": FunctionFragment;
    "canRedeem()": FunctionFragment;
    "claimed(address)": FunctionFragment;
    "getPoints(uint256,uint256,bytes32[])": FunctionFragment;
    "isEnabled()": FunctionFragment;
    "merkleRoot()": FunctionFragment;
    "pointsToken()": FunctionFragment;
    "redeem()": FunctionFragment;
    "redeemed(address)": FunctionFragment;
    "rewardToken()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_disableTime"
      | "_enableTime"
      | "_floor"
      | "_receiver"
      | "_totalClaimed"
      | "_totalReward"
      | "canRedeem"
      | "claimed"
      | "getPoints"
      | "isEnabled"
      | "merkleRoot"
      | "pointsToken"
      | "redeem"
      | "redeemed"
      | "rewardToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_disableTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_enableTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_floor", values?: undefined): string;
  encodeFunctionData(functionFragment: "_receiver", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_totalClaimed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_totalReward",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "canRedeem", values?: undefined): string;
  encodeFunctionData(functionFragment: "claimed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getPoints",
    values: [BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "isEnabled", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "merkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pointsToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "redeem", values?: undefined): string;
  encodeFunctionData(functionFragment: "redeemed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_disableTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_enableTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_floor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_receiver", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_totalClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_totalReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canRedeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPoints", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isEnabled", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "merkleRoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pointsToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeemed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;

  events: {
    "Points(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Points"): EventFragment;
}

export interface PointsEventObject {
  from: string;
  amount: BigNumber;
}
export type PointsEvent = TypedEvent<[string, BigNumber], PointsEventObject>;

export type PointsEventFilter = TypedEventFilter<PointsEvent>;

export interface Wave extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WaveInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _disableTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    _enableTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    _floor(overrides?: CallOverrides): Promise<[BigNumber]>;

    _receiver(overrides?: CallOverrides): Promise<[string]>;

    _totalClaimed(overrides?: CallOverrides): Promise<[BigNumber]>;

    _totalReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    canRedeem(overrides?: CallOverrides): Promise<[boolean]>;

    claimed(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getPoints(
      amount: BigNumberish,
      key: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    merkleRoot(overrides?: CallOverrides): Promise<[string]>;

    pointsToken(overrides?: CallOverrides): Promise<[string]>;

    redeem(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemed(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;
  };

  _disableTime(overrides?: CallOverrides): Promise<BigNumber>;

  _enableTime(overrides?: CallOverrides): Promise<BigNumber>;

  _floor(overrides?: CallOverrides): Promise<BigNumber>;

  _receiver(overrides?: CallOverrides): Promise<string>;

  _totalClaimed(overrides?: CallOverrides): Promise<BigNumber>;

  _totalReward(overrides?: CallOverrides): Promise<BigNumber>;

  canRedeem(overrides?: CallOverrides): Promise<boolean>;

  claimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  getPoints(
    amount: BigNumberish,
    key: BigNumberish,
    merkleProof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isEnabled(overrides?: CallOverrides): Promise<boolean>;

  merkleRoot(overrides?: CallOverrides): Promise<string>;

  pointsToken(overrides?: CallOverrides): Promise<string>;

  redeem(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    _disableTime(overrides?: CallOverrides): Promise<BigNumber>;

    _enableTime(overrides?: CallOverrides): Promise<BigNumber>;

    _floor(overrides?: CallOverrides): Promise<BigNumber>;

    _receiver(overrides?: CallOverrides): Promise<string>;

    _totalClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    _totalReward(overrides?: CallOverrides): Promise<BigNumber>;

    canRedeem(overrides?: CallOverrides): Promise<boolean>;

    claimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPoints(
      amount: BigNumberish,
      key: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    isEnabled(overrides?: CallOverrides): Promise<boolean>;

    merkleRoot(overrides?: CallOverrides): Promise<string>;

    pointsToken(overrides?: CallOverrides): Promise<string>;

    redeem(overrides?: CallOverrides): Promise<void>;

    redeemed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    rewardToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Points(address,uint256)"(
      from?: string | null,
      amount?: null
    ): PointsEventFilter;
    Points(from?: string | null, amount?: null): PointsEventFilter;
  };

  estimateGas: {
    _disableTime(overrides?: CallOverrides): Promise<BigNumber>;

    _enableTime(overrides?: CallOverrides): Promise<BigNumber>;

    _floor(overrides?: CallOverrides): Promise<BigNumber>;

    _receiver(overrides?: CallOverrides): Promise<BigNumber>;

    _totalClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    _totalReward(overrides?: CallOverrides): Promise<BigNumber>;

    canRedeem(overrides?: CallOverrides): Promise<BigNumber>;

    claimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPoints(
      amount: BigNumberish,
      key: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    merkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    pointsToken(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _disableTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _enableTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _floor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _receiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _totalClaimed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _totalReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canRedeem(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoints(
      amount: BigNumberish,
      key: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    merkleRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pointsToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
