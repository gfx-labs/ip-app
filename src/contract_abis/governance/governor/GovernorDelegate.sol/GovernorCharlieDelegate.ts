/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export type ReceiptStruct = {
  hasVoted: boolean;
  support: BigNumberish;
  votes: BigNumberish;
};

export type ReceiptStructOutput = [boolean, number, BigNumber] & {
  hasVoted: boolean;
  support: number;
  votes: BigNumber;
};

export interface GovernorCharlieDelegateInterface extends utils.Interface {
  functions: {
    "BALLOT_TYPEHASH()": FunctionFragment;
    "DOMAIN_TYPEHASH()": FunctionFragment;
    "GRACE_PERIOD()": FunctionFragment;
    "_setDelay(uint256)": FunctionFragment;
    "_setEmergencyDelay(uint256)": FunctionFragment;
    "_setEmergencyQuorumVotes(uint256)": FunctionFragment;
    "_setEmergencyVotingPeriod(uint256)": FunctionFragment;
    "_setProposalThreshold(uint256)": FunctionFragment;
    "_setQuorumVotes(uint256)": FunctionFragment;
    "_setVotingDelay(uint256)": FunctionFragment;
    "_setVotingPeriod(uint256)": FunctionFragment;
    "_setWhitelistAccountExpiration(address,uint256)": FunctionFragment;
    "_setWhitelistGuardian(address)": FunctionFragment;
    "cancel(uint256)": FunctionFragment;
    "castVote(uint256,uint8)": FunctionFragment;
    "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": FunctionFragment;
    "castVoteWithReason(uint256,uint8,string)": FunctionFragment;
    "emergencyQuorumVotes()": FunctionFragment;
    "emergencyTimelockDelay()": FunctionFragment;
    "emergencyVotingPeriod()": FunctionFragment;
    "execute(uint256)": FunctionFragment;
    "executeTransaction(address,uint256,string,bytes,uint256)": FunctionFragment;
    "getActions(uint256)": FunctionFragment;
    "getReceipt(uint256,address)": FunctionFragment;
    "implementation()": FunctionFragment;
    "initialProposalId()": FunctionFragment;
    "initialize(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "initialized()": FunctionFragment;
    "ipt()": FunctionFragment;
    "isWhitelisted(address)": FunctionFragment;
    "latestProposalIds(address)": FunctionFragment;
    "name()": FunctionFragment;
    "proposalCount()": FunctionFragment;
    "proposalMaxOperations()": FunctionFragment;
    "proposalReceipts(uint256,address)": FunctionFragment;
    "proposalThreshold()": FunctionFragment;
    "proposalTimelockDelay()": FunctionFragment;
    "proposals(uint256)": FunctionFragment;
    "propose(address[],uint256[],string[],bytes[],string,bool)": FunctionFragment;
    "queue(uint256)": FunctionFragment;
    "queuedTransactions(bytes32)": FunctionFragment;
    "quorumVotes()": FunctionFragment;
    "state(uint256)": FunctionFragment;
    "votingDelay()": FunctionFragment;
    "votingPeriod()": FunctionFragment;
    "whitelistAccountExpirations(address)": FunctionFragment;
    "whitelistGuardian()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BALLOT_TYPEHASH"
      | "BALLOT_TYPEHASH()"
      | "DOMAIN_TYPEHASH"
      | "DOMAIN_TYPEHASH()"
      | "GRACE_PERIOD"
      | "GRACE_PERIOD()"
      | "_setDelay"
      | "_setDelay(uint256)"
      | "_setEmergencyDelay"
      | "_setEmergencyDelay(uint256)"
      | "_setEmergencyQuorumVotes"
      | "_setEmergencyQuorumVotes(uint256)"
      | "_setEmergencyVotingPeriod"
      | "_setEmergencyVotingPeriod(uint256)"
      | "_setProposalThreshold"
      | "_setProposalThreshold(uint256)"
      | "_setQuorumVotes"
      | "_setQuorumVotes(uint256)"
      | "_setVotingDelay"
      | "_setVotingDelay(uint256)"
      | "_setVotingPeriod"
      | "_setVotingPeriod(uint256)"
      | "_setWhitelistAccountExpiration"
      | "_setWhitelistAccountExpiration(address,uint256)"
      | "_setWhitelistGuardian"
      | "_setWhitelistGuardian(address)"
      | "cancel"
      | "cancel(uint256)"
      | "castVote"
      | "castVote(uint256,uint8)"
      | "castVoteBySig"
      | "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)"
      | "castVoteWithReason"
      | "castVoteWithReason(uint256,uint8,string)"
      | "emergencyQuorumVotes"
      | "emergencyQuorumVotes()"
      | "emergencyTimelockDelay"
      | "emergencyTimelockDelay()"
      | "emergencyVotingPeriod"
      | "emergencyVotingPeriod()"
      | "execute"
      | "execute(uint256)"
      | "executeTransaction"
      | "executeTransaction(address,uint256,string,bytes,uint256)"
      | "getActions"
      | "getActions(uint256)"
      | "getReceipt"
      | "getReceipt(uint256,address)"
      | "implementation"
      | "implementation()"
      | "initialProposalId"
      | "initialProposalId()"
      | "initialize"
      | "initialize(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"
      | "initialized"
      | "initialized()"
      | "ipt"
      | "ipt()"
      | "isWhitelisted"
      | "isWhitelisted(address)"
      | "latestProposalIds"
      | "latestProposalIds(address)"
      | "name"
      | "name()"
      | "proposalCount"
      | "proposalCount()"
      | "proposalMaxOperations"
      | "proposalMaxOperations()"
      | "proposalReceipts"
      | "proposalReceipts(uint256,address)"
      | "proposalThreshold"
      | "proposalThreshold()"
      | "proposalTimelockDelay"
      | "proposalTimelockDelay()"
      | "proposals"
      | "proposals(uint256)"
      | "propose"
      | "propose(address[],uint256[],string[],bytes[],string,bool)"
      | "queue"
      | "queue(uint256)"
      | "queuedTransactions"
      | "queuedTransactions(bytes32)"
      | "quorumVotes"
      | "quorumVotes()"
      | "state"
      | "state(uint256)"
      | "votingDelay"
      | "votingDelay()"
      | "votingPeriod"
      | "votingPeriod()"
      | "whitelistAccountExpirations"
      | "whitelistAccountExpirations(address)"
      | "whitelistGuardian"
      | "whitelistGuardian()"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BALLOT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BALLOT_TYPEHASH()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_TYPEHASH()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GRACE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GRACE_PERIOD()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_setDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setDelay(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setEmergencyDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setEmergencyDelay(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setEmergencyQuorumVotes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setEmergencyQuorumVotes(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setEmergencyVotingPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setEmergencyVotingPeriod(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setProposalThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setProposalThreshold(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setQuorumVotes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setQuorumVotes(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setVotingDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setVotingDelay(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setVotingPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setVotingPeriod(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setWhitelistAccountExpiration",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setWhitelistAccountExpiration(address,uint256)",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setWhitelistGuardian",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_setWhitelistGuardian(address)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote(uint256,uint8)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteBySig",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteWithReason",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteWithReason(uint256,uint8,string)",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyQuorumVotes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyQuorumVotes()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyTimelockDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyTimelockDelay()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyVotingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyVotingPeriod()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execute(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransaction",
    values: [string, BigNumberish, string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransaction(address,uint256,string,bytes,uint256)",
    values: [string, BigNumberish, string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActions(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReceipt",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReceipt(uint256,address)",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "implementation()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialProposalId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialProposalId()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialized()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ipt", values?: undefined): string;
  encodeFunctionData(functionFragment: "ipt()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted(address)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "latestProposalIds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "latestProposalIds(address)",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "name()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalCount()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalMaxOperations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalMaxOperations()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalReceipts",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalReceipts(uint256,address)",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalThreshold()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalTimelockDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalTimelockDelay()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposals(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [string[], BigNumberish[], string[], BytesLike[], string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "propose(address[],uint256[],string[],bytes[],string,bool)",
    values: [string[], BigNumberish[], string[], BytesLike[], string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "queue", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "queue(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "queuedTransactions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "queuedTransactions(bytes32)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "quorumVotes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quorumVotes()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "state", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "state(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votingDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingDelay()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriod()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistAccountExpirations",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistAccountExpirations(address)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistGuardian",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistGuardian()",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BALLOT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BALLOT_TYPEHASH()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_TYPEHASH()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GRACE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GRACE_PERIOD()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_setDelay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_setDelay(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setEmergencyDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setEmergencyDelay(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setEmergencyQuorumVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setEmergencyQuorumVotes(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setEmergencyVotingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setEmergencyVotingPeriod(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setProposalThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setProposalThreshold(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setQuorumVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setQuorumVotes(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setVotingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setVotingDelay(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setVotingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setVotingPeriod(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setWhitelistAccountExpiration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setWhitelistAccountExpiration(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setWhitelistGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setWhitelistGuardian(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancel(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "castVote(uint256,uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVoteBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVoteWithReason",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVoteWithReason(uint256,uint8,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyQuorumVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyQuorumVotes()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyTimelockDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyTimelockDelay()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyVotingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyVotingPeriod()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "execute(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransaction(address,uint256,string,bytes,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getActions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActions(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReceipt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReceipt(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialProposalId()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialize(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialized()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ipt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ipt()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestProposalIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestProposalIds(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalMaxOperations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalMaxOperations()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalReceipts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalReceipts(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalThreshold()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalTimelockDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalTimelockDelay()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposals(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "propose(address[],uint256[],string[],bytes[],string,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "queue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queue(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queuedTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queuedTransactions(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quorumVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quorumVotes()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "state(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingDelay()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriod()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistAccountExpirations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistAccountExpirations(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistGuardian()",
    data: BytesLike
  ): Result;

  events: {
    "CancelTransaction(bytes32,address,uint256,string,bytes,uint256)": EventFragment;
    "EmergencyVotingPeriodSet(uint256,uint256)": EventFragment;
    "ExecuteTransaction(bytes32,address,uint256,string,bytes,uint256)": EventFragment;
    "NewAdmin(address,address)": EventFragment;
    "NewDelay(uint256,uint256)": EventFragment;
    "NewEmergencyDelay(uint256,uint256)": EventFragment;
    "NewEmergencyQuorum(uint256,uint256)": EventFragment;
    "NewImplementation(address,address)": EventFragment;
    "NewPendingAdmin(address,address)": EventFragment;
    "NewQuorum(uint256,uint256)": EventFragment;
    "ProposalCanceled(uint256)": EventFragment;
    "ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)": EventFragment;
    "ProposalExecuted(uint256)": EventFragment;
    "ProposalQueued(uint256,uint256)": EventFragment;
    "ProposalThresholdSet(uint256,uint256)": EventFragment;
    "QueueTransaction(bytes32,address,uint256,string,bytes,uint256)": EventFragment;
    "VoteCast(address,uint256,uint8,uint256,string)": EventFragment;
    "VotingDelaySet(uint256,uint256)": EventFragment;
    "VotingPeriodSet(uint256,uint256)": EventFragment;
    "WhitelistAccountExpirationSet(address,uint256)": EventFragment;
    "WhitelistGuardianSet(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelTransaction"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CancelTransaction(bytes32,address,uint256,string,bytes,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyVotingPeriodSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EmergencyVotingPeriodSet(uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteTransaction"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ExecuteTransaction(bytes32,address,uint256,string,bytes,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAdmin(address,address)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewDelay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewDelay(uint256,uint256)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewEmergencyDelay"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NewEmergencyDelay(uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewEmergencyQuorum"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NewEmergencyQuorum(uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewImplementation"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NewImplementation(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPendingAdmin"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NewPendingAdmin(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewQuorum"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewQuorum(uint256,uint256)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCanceled(uint256)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExecuted(uint256)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalQueued"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProposalQueued(uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalThresholdSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProposalThresholdSet(uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QueueTransaction"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "QueueTransaction(bytes32,address,uint256,string,bytes,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteCast"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "VoteCast(address,uint256,uint8,uint256,string)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VotingDelaySet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "VotingDelaySet(uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VotingPeriodSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "VotingPeriodSet(uint256,uint256)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "WhitelistAccountExpirationSet"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "WhitelistAccountExpirationSet(address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistGuardianSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "WhitelistGuardianSet(address,address)"
  ): EventFragment;
}

export interface CancelTransactionEventObject {
  txHash: string;
  target: string;
  value: BigNumber;
  signature: string;
  data: string;
  eta: BigNumber;
}
export type CancelTransactionEvent = TypedEvent<
  [string, string, BigNumber, string, string, BigNumber],
  CancelTransactionEventObject
>;

export type CancelTransactionEventFilter =
  TypedEventFilter<CancelTransactionEvent>;

export interface EmergencyVotingPeriodSetEventObject {
  oldEmergencyVotingPeriod: BigNumber;
  emergencyVotingPeriod: BigNumber;
}
export type EmergencyVotingPeriodSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  EmergencyVotingPeriodSetEventObject
>;

export type EmergencyVotingPeriodSetEventFilter =
  TypedEventFilter<EmergencyVotingPeriodSetEvent>;

export interface ExecuteTransactionEventObject {
  txHash: string;
  target: string;
  value: BigNumber;
  signature: string;
  data: string;
  eta: BigNumber;
}
export type ExecuteTransactionEvent = TypedEvent<
  [string, string, BigNumber, string, string, BigNumber],
  ExecuteTransactionEventObject
>;

export type ExecuteTransactionEventFilter =
  TypedEventFilter<ExecuteTransactionEvent>;

export interface NewAdminEventObject {
  oldAdmin: string;
  newAdmin: string;
}
export type NewAdminEvent = TypedEvent<[string, string], NewAdminEventObject>;

export type NewAdminEventFilter = TypedEventFilter<NewAdminEvent>;

export interface NewDelayEventObject {
  oldTimelockDelay: BigNumber;
  proposalTimelockDelay: BigNumber;
}
export type NewDelayEvent = TypedEvent<
  [BigNumber, BigNumber],
  NewDelayEventObject
>;

export type NewDelayEventFilter = TypedEventFilter<NewDelayEvent>;

export interface NewEmergencyDelayEventObject {
  oldEmergencyTimelockDelay: BigNumber;
  emergencyTimelockDelay: BigNumber;
}
export type NewEmergencyDelayEvent = TypedEvent<
  [BigNumber, BigNumber],
  NewEmergencyDelayEventObject
>;

export type NewEmergencyDelayEventFilter =
  TypedEventFilter<NewEmergencyDelayEvent>;

export interface NewEmergencyQuorumEventObject {
  oldEmergencyQuorumVotes: BigNumber;
  emergencyQuorumVotes: BigNumber;
}
export type NewEmergencyQuorumEvent = TypedEvent<
  [BigNumber, BigNumber],
  NewEmergencyQuorumEventObject
>;

export type NewEmergencyQuorumEventFilter =
  TypedEventFilter<NewEmergencyQuorumEvent>;

export interface NewImplementationEventObject {
  oldImplementation: string;
  newImplementation: string;
}
export type NewImplementationEvent = TypedEvent<
  [string, string],
  NewImplementationEventObject
>;

export type NewImplementationEventFilter =
  TypedEventFilter<NewImplementationEvent>;

export interface NewPendingAdminEventObject {
  oldPendingAdmin: string;
  newPendingAdmin: string;
}
export type NewPendingAdminEvent = TypedEvent<
  [string, string],
  NewPendingAdminEventObject
>;

export type NewPendingAdminEventFilter = TypedEventFilter<NewPendingAdminEvent>;

export interface NewQuorumEventObject {
  oldQuorumVotes: BigNumber;
  quorumVotes: BigNumber;
}
export type NewQuorumEvent = TypedEvent<
  [BigNumber, BigNumber],
  NewQuorumEventObject
>;

export type NewQuorumEventFilter = TypedEventFilter<NewQuorumEvent>;

export interface ProposalCanceledEventObject {
  id: BigNumber;
}
export type ProposalCanceledEvent = TypedEvent<
  [BigNumber],
  ProposalCanceledEventObject
>;

export type ProposalCanceledEventFilter =
  TypedEventFilter<ProposalCanceledEvent>;

export interface ProposalCreatedEventObject {
  id: BigNumber;
  proposer: string;
  targets: string[];
  values: BigNumber[];
  signatures: string[];
  calldatas: string[];
  startBlock: BigNumber;
  endBlock: BigNumber;
  description: string;
}
export type ProposalCreatedEvent = TypedEvent<
  [
    BigNumber,
    string,
    string[],
    BigNumber[],
    string[],
    string[],
    BigNumber,
    BigNumber,
    string
  ],
  ProposalCreatedEventObject
>;

export type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>;

export interface ProposalExecutedEventObject {
  id: BigNumber;
}
export type ProposalExecutedEvent = TypedEvent<
  [BigNumber],
  ProposalExecutedEventObject
>;

export type ProposalExecutedEventFilter =
  TypedEventFilter<ProposalExecutedEvent>;

export interface ProposalQueuedEventObject {
  id: BigNumber;
  eta: BigNumber;
}
export type ProposalQueuedEvent = TypedEvent<
  [BigNumber, BigNumber],
  ProposalQueuedEventObject
>;

export type ProposalQueuedEventFilter = TypedEventFilter<ProposalQueuedEvent>;

export interface ProposalThresholdSetEventObject {
  oldProposalThreshold: BigNumber;
  newProposalThreshold: BigNumber;
}
export type ProposalThresholdSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  ProposalThresholdSetEventObject
>;

export type ProposalThresholdSetEventFilter =
  TypedEventFilter<ProposalThresholdSetEvent>;

export interface QueueTransactionEventObject {
  txHash: string;
  target: string;
  value: BigNumber;
  signature: string;
  data: string;
  eta: BigNumber;
}
export type QueueTransactionEvent = TypedEvent<
  [string, string, BigNumber, string, string, BigNumber],
  QueueTransactionEventObject
>;

export type QueueTransactionEventFilter =
  TypedEventFilter<QueueTransactionEvent>;

export interface VoteCastEventObject {
  voter: string;
  proposalId: BigNumber;
  support: number;
  votes: BigNumber;
  reason: string;
}
export type VoteCastEvent = TypedEvent<
  [string, BigNumber, number, BigNumber, string],
  VoteCastEventObject
>;

export type VoteCastEventFilter = TypedEventFilter<VoteCastEvent>;

export interface VotingDelaySetEventObject {
  oldVotingDelay: BigNumber;
  newVotingDelay: BigNumber;
}
export type VotingDelaySetEvent = TypedEvent<
  [BigNumber, BigNumber],
  VotingDelaySetEventObject
>;

export type VotingDelaySetEventFilter = TypedEventFilter<VotingDelaySetEvent>;

export interface VotingPeriodSetEventObject {
  oldVotingPeriod: BigNumber;
  newVotingPeriod: BigNumber;
}
export type VotingPeriodSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  VotingPeriodSetEventObject
>;

export type VotingPeriodSetEventFilter = TypedEventFilter<VotingPeriodSetEvent>;

export interface WhitelistAccountExpirationSetEventObject {
  account: string;
  expiration: BigNumber;
}
export type WhitelistAccountExpirationSetEvent = TypedEvent<
  [string, BigNumber],
  WhitelistAccountExpirationSetEventObject
>;

export type WhitelistAccountExpirationSetEventFilter =
  TypedEventFilter<WhitelistAccountExpirationSetEvent>;

export interface WhitelistGuardianSetEventObject {
  oldGuardian: string;
  newGuardian: string;
}
export type WhitelistGuardianSetEvent = TypedEvent<
  [string, string],
  WhitelistGuardianSetEventObject
>;

export type WhitelistGuardianSetEventFilter =
  TypedEventFilter<WhitelistGuardianSetEvent>;

export interface GovernorCharlieDelegate extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GovernorCharlieDelegateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BALLOT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    "BALLOT_TYPEHASH()"(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    "DOMAIN_TYPEHASH()"(overrides?: CallOverrides): Promise<[string]>;

    GRACE_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    "GRACE_PERIOD()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _setDelay(
      proposalTimelockDelay_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "_setDelay(uint256)"(
      proposalTimelockDelay_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _setEmergencyDelay(
      emergencyTimelockDelay_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "_setEmergencyDelay(uint256)"(
      emergencyTimelockDelay_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _setEmergencyQuorumVotes(
      newEmergencyQuorumVotes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "_setEmergencyQuorumVotes(uint256)"(
      newEmergencyQuorumVotes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _setEmergencyVotingPeriod(
      newEmergencyVotingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "_setEmergencyVotingPeriod(uint256)"(
      newEmergencyVotingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _setProposalThreshold(
      newProposalThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "_setProposalThreshold(uint256)"(
      newProposalThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _setQuorumVotes(
      newQuorumVotes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "_setQuorumVotes(uint256)"(
      newQuorumVotes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _setVotingDelay(
      newVotingDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "_setVotingDelay(uint256)"(
      newVotingDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _setVotingPeriod(
      newVotingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "_setVotingPeriod(uint256)"(
      newVotingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _setWhitelistAccountExpiration(
      account: string,
      expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "_setWhitelistAccountExpiration(address,uint256)"(
      account: string,
      expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _setWhitelistGuardian(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "_setWhitelistGuardian(address)"(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancel(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "cancel(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    castVote(
      proposalId: BigNumberish,
      support: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "castVote(uint256,uint8)"(
      proposalId: BigNumberish,
      support: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    castVoteBySig(
      proposalId: BigNumberish,
      support: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)"(
      proposalId: BigNumberish,
      support: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    castVoteWithReason(
      proposalId: BigNumberish,
      support: BigNumberish,
      reason: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "castVoteWithReason(uint256,uint8,string)"(
      proposalId: BigNumberish,
      support: BigNumberish,
      reason: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyQuorumVotes(overrides?: CallOverrides): Promise<[BigNumber]>;

    "emergencyQuorumVotes()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    emergencyTimelockDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    "emergencyTimelockDelay()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    emergencyVotingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    "emergencyVotingPeriod()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    execute(
      proposalId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "execute(uint256)"(
      proposalId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeTransaction(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      eta: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "executeTransaction(address,uint256,string,bytes,uint256)"(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      eta: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getActions(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], string[], string[]] & {
        targets: string[];
        values: BigNumber[];
        signatures: string[];
        calldatas: string[];
      }
    >;

    "getActions(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], string[], string[]] & {
        targets: string[];
        values: BigNumber[];
        signatures: string[];
        calldatas: string[];
      }
    >;

    getReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<[ReceiptStructOutput]>;

    "getReceipt(uint256,address)"(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<[ReceiptStructOutput]>;

    implementation(overrides?: CallOverrides): Promise<[string]>;

    "implementation()"(overrides?: CallOverrides): Promise<[string]>;

    initialProposalId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "initialProposalId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      ipt_: string,
      votingPeriod_: BigNumberish,
      votingDelay_: BigNumberish,
      proposalThreshold_: BigNumberish,
      proposalTimelockDelay_: BigNumberish,
      quorumVotes_: BigNumberish,
      emergencyQuorumVotes_: BigNumberish,
      emergencyVotingPeriod_: BigNumberish,
      emergencyTimelockDelay_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      ipt_: string,
      votingPeriod_: BigNumberish,
      votingDelay_: BigNumberish,
      proposalThreshold_: BigNumberish,
      proposalTimelockDelay_: BigNumberish,
      quorumVotes_: BigNumberish,
      emergencyQuorumVotes_: BigNumberish,
      emergencyVotingPeriod_: BigNumberish,
      emergencyTimelockDelay_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    "initialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    ipt(overrides?: CallOverrides): Promise<[string]>;

    "ipt()"(overrides?: CallOverrides): Promise<[string]>;

    isWhitelisted(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isWhitelisted(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    latestProposalIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "latestProposalIds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    proposalCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "proposalCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposalMaxOperations(overrides?: CallOverrides): Promise<[BigNumber]>;

    "proposalMaxOperations()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposalReceipts(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, BigNumber] & {
        hasVoted: boolean;
        support: number;
        votes: BigNumber;
      }
    >;

    "proposalReceipts(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, BigNumber] & {
        hasVoted: boolean;
        support: number;
        votes: BigNumber;
      }
    >;

    proposalThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    "proposalThreshold()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposalTimelockDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    "proposalTimelockDelay()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        proposer: string;
        eta: BigNumber;
        startBlock: BigNumber;
        endBlock: BigNumber;
        forVotes: BigNumber;
        againstVotes: BigNumber;
        abstainVotes: BigNumber;
        canceled: boolean;
        executed: boolean;
        emergency: boolean;
        quorumVotes: BigNumber;
        delay: BigNumber;
      }
    >;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        proposer: string;
        eta: BigNumber;
        startBlock: BigNumber;
        endBlock: BigNumber;
        forVotes: BigNumber;
        againstVotes: BigNumber;
        abstainVotes: BigNumber;
        canceled: boolean;
        executed: boolean;
        emergency: boolean;
        quorumVotes: BigNumber;
        delay: BigNumber;
      }
    >;

    propose(
      targets: string[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      emergency: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "propose(address[],uint256[],string[],bytes[],string,bool)"(
      targets: string[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      emergency: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    queue(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "queue(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    queuedTransactions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "queuedTransactions(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    quorumVotes(overrides?: CallOverrides): Promise<[BigNumber]>;

    "quorumVotes()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    state(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "state(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    votingDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    "votingDelay()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    votingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    "votingPeriod()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    whitelistAccountExpirations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "whitelistAccountExpirations(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    whitelistGuardian(overrides?: CallOverrides): Promise<[string]>;

    "whitelistGuardian()"(overrides?: CallOverrides): Promise<[string]>;
  };

  BALLOT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "BALLOT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "DOMAIN_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  "GRACE_PERIOD()"(overrides?: CallOverrides): Promise<BigNumber>;

  _setDelay(
    proposalTimelockDelay_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "_setDelay(uint256)"(
    proposalTimelockDelay_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _setEmergencyDelay(
    emergencyTimelockDelay_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "_setEmergencyDelay(uint256)"(
    emergencyTimelockDelay_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _setEmergencyQuorumVotes(
    newEmergencyQuorumVotes: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "_setEmergencyQuorumVotes(uint256)"(
    newEmergencyQuorumVotes: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _setEmergencyVotingPeriod(
    newEmergencyVotingPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "_setEmergencyVotingPeriod(uint256)"(
    newEmergencyVotingPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _setProposalThreshold(
    newProposalThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "_setProposalThreshold(uint256)"(
    newProposalThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _setQuorumVotes(
    newQuorumVotes: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "_setQuorumVotes(uint256)"(
    newQuorumVotes: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _setVotingDelay(
    newVotingDelay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "_setVotingDelay(uint256)"(
    newVotingDelay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _setVotingPeriod(
    newVotingPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "_setVotingPeriod(uint256)"(
    newVotingPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _setWhitelistAccountExpiration(
    account: string,
    expiration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "_setWhitelistAccountExpiration(address,uint256)"(
    account: string,
    expiration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _setWhitelistGuardian(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "_setWhitelistGuardian(address)"(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancel(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "cancel(uint256)"(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  castVote(
    proposalId: BigNumberish,
    support: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "castVote(uint256,uint8)"(
    proposalId: BigNumberish,
    support: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  castVoteBySig(
    proposalId: BigNumberish,
    support: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)"(
    proposalId: BigNumberish,
    support: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  castVoteWithReason(
    proposalId: BigNumberish,
    support: BigNumberish,
    reason: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "castVoteWithReason(uint256,uint8,string)"(
    proposalId: BigNumberish,
    support: BigNumberish,
    reason: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyQuorumVotes(overrides?: CallOverrides): Promise<BigNumber>;

  "emergencyQuorumVotes()"(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyTimelockDelay(overrides?: CallOverrides): Promise<BigNumber>;

  "emergencyTimelockDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyVotingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "emergencyVotingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  execute(
    proposalId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "execute(uint256)"(
    proposalId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeTransaction(
    target: string,
    value: BigNumberish,
    signature: string,
    data: BytesLike,
    eta: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "executeTransaction(address,uint256,string,bytes,uint256)"(
    target: string,
    value: BigNumberish,
    signature: string,
    data: BytesLike,
    eta: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getActions(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[], string[], string[]] & {
      targets: string[];
      values: BigNumber[];
      signatures: string[];
      calldatas: string[];
    }
  >;

  "getActions(uint256)"(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[], string[], string[]] & {
      targets: string[];
      values: BigNumber[];
      signatures: string[];
      calldatas: string[];
    }
  >;

  getReceipt(
    proposalId: BigNumberish,
    voter: string,
    overrides?: CallOverrides
  ): Promise<ReceiptStructOutput>;

  "getReceipt(uint256,address)"(
    proposalId: BigNumberish,
    voter: string,
    overrides?: CallOverrides
  ): Promise<ReceiptStructOutput>;

  implementation(overrides?: CallOverrides): Promise<string>;

  "implementation()"(overrides?: CallOverrides): Promise<string>;

  initialProposalId(overrides?: CallOverrides): Promise<BigNumber>;

  "initialProposalId()"(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    ipt_: string,
    votingPeriod_: BigNumberish,
    votingDelay_: BigNumberish,
    proposalThreshold_: BigNumberish,
    proposalTimelockDelay_: BigNumberish,
    quorumVotes_: BigNumberish,
    emergencyQuorumVotes_: BigNumberish,
    emergencyVotingPeriod_: BigNumberish,
    emergencyTimelockDelay_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
    ipt_: string,
    votingPeriod_: BigNumberish,
    votingDelay_: BigNumberish,
    proposalThreshold_: BigNumberish,
    proposalTimelockDelay_: BigNumberish,
    quorumVotes_: BigNumberish,
    emergencyQuorumVotes_: BigNumberish,
    emergencyVotingPeriod_: BigNumberish,
    emergencyTimelockDelay_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  "initialized()"(overrides?: CallOverrides): Promise<boolean>;

  ipt(overrides?: CallOverrides): Promise<string>;

  "ipt()"(overrides?: CallOverrides): Promise<string>;

  isWhitelisted(account: string, overrides?: CallOverrides): Promise<boolean>;

  "isWhitelisted(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  latestProposalIds(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "latestProposalIds(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

  "proposalCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  proposalMaxOperations(overrides?: CallOverrides): Promise<BigNumber>;

  "proposalMaxOperations()"(overrides?: CallOverrides): Promise<BigNumber>;

  proposalReceipts(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, number, BigNumber] & {
      hasVoted: boolean;
      support: number;
      votes: BigNumber;
    }
  >;

  "proposalReceipts(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, number, BigNumber] & {
      hasVoted: boolean;
      support: number;
      votes: BigNumber;
    }
  >;

  proposalThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  "proposalThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

  proposalTimelockDelay(overrides?: CallOverrides): Promise<BigNumber>;

  "proposalTimelockDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

  proposals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      boolean,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      proposer: string;
      eta: BigNumber;
      startBlock: BigNumber;
      endBlock: BigNumber;
      forVotes: BigNumber;
      againstVotes: BigNumber;
      abstainVotes: BigNumber;
      canceled: boolean;
      executed: boolean;
      emergency: boolean;
      quorumVotes: BigNumber;
      delay: BigNumber;
    }
  >;

  "proposals(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      boolean,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      proposer: string;
      eta: BigNumber;
      startBlock: BigNumber;
      endBlock: BigNumber;
      forVotes: BigNumber;
      againstVotes: BigNumber;
      abstainVotes: BigNumber;
      canceled: boolean;
      executed: boolean;
      emergency: boolean;
      quorumVotes: BigNumber;
      delay: BigNumber;
    }
  >;

  propose(
    targets: string[],
    values: BigNumberish[],
    signatures: string[],
    calldatas: BytesLike[],
    description: string,
    emergency: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "propose(address[],uint256[],string[],bytes[],string,bool)"(
    targets: string[],
    values: BigNumberish[],
    signatures: string[],
    calldatas: BytesLike[],
    description: string,
    emergency: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  queue(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "queue(uint256)"(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  queuedTransactions(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "queuedTransactions(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  quorumVotes(overrides?: CallOverrides): Promise<BigNumber>;

  "quorumVotes()"(overrides?: CallOverrides): Promise<BigNumber>;

  state(proposalId: BigNumberish, overrides?: CallOverrides): Promise<number>;

  "state(uint256)"(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  votingDelay(overrides?: CallOverrides): Promise<BigNumber>;

  "votingDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

  votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "votingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  whitelistAccountExpirations(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "whitelistAccountExpirations(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  whitelistGuardian(overrides?: CallOverrides): Promise<string>;

  "whitelistGuardian()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BALLOT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "BALLOT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "DOMAIN_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    "GRACE_PERIOD()"(overrides?: CallOverrides): Promise<BigNumber>;

    _setDelay(
      proposalTimelockDelay_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "_setDelay(uint256)"(
      proposalTimelockDelay_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _setEmergencyDelay(
      emergencyTimelockDelay_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "_setEmergencyDelay(uint256)"(
      emergencyTimelockDelay_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _setEmergencyQuorumVotes(
      newEmergencyQuorumVotes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "_setEmergencyQuorumVotes(uint256)"(
      newEmergencyQuorumVotes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _setEmergencyVotingPeriod(
      newEmergencyVotingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "_setEmergencyVotingPeriod(uint256)"(
      newEmergencyVotingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _setProposalThreshold(
      newProposalThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "_setProposalThreshold(uint256)"(
      newProposalThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _setQuorumVotes(
      newQuorumVotes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "_setQuorumVotes(uint256)"(
      newQuorumVotes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _setVotingDelay(
      newVotingDelay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "_setVotingDelay(uint256)"(
      newVotingDelay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _setVotingPeriod(
      newVotingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "_setVotingPeriod(uint256)"(
      newVotingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _setWhitelistAccountExpiration(
      account: string,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "_setWhitelistAccountExpiration(address,uint256)"(
      account: string,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _setWhitelistGuardian(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "_setWhitelistGuardian(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    cancel(proposalId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "cancel(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    castVote(
      proposalId: BigNumberish,
      support: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "castVote(uint256,uint8)"(
      proposalId: BigNumberish,
      support: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    castVoteBySig(
      proposalId: BigNumberish,
      support: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)"(
      proposalId: BigNumberish,
      support: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    castVoteWithReason(
      proposalId: BigNumberish,
      support: BigNumberish,
      reason: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "castVoteWithReason(uint256,uint8,string)"(
      proposalId: BigNumberish,
      support: BigNumberish,
      reason: string,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyQuorumVotes(overrides?: CallOverrides): Promise<BigNumber>;

    "emergencyQuorumVotes()"(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyTimelockDelay(overrides?: CallOverrides): Promise<BigNumber>;

    "emergencyTimelockDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyVotingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "emergencyVotingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    execute(proposalId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "execute(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    executeTransaction(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      eta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "executeTransaction(address,uint256,string,bytes,uint256)"(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      eta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getActions(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], string[], string[]] & {
        targets: string[];
        values: BigNumber[];
        signatures: string[];
        calldatas: string[];
      }
    >;

    "getActions(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], string[], string[]] & {
        targets: string[];
        values: BigNumber[];
        signatures: string[];
        calldatas: string[];
      }
    >;

    getReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<ReceiptStructOutput>;

    "getReceipt(uint256,address)"(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<ReceiptStructOutput>;

    implementation(overrides?: CallOverrides): Promise<string>;

    "implementation()"(overrides?: CallOverrides): Promise<string>;

    initialProposalId(overrides?: CallOverrides): Promise<BigNumber>;

    "initialProposalId()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      ipt_: string,
      votingPeriod_: BigNumberish,
      votingDelay_: BigNumberish,
      proposalThreshold_: BigNumberish,
      proposalTimelockDelay_: BigNumberish,
      quorumVotes_: BigNumberish,
      emergencyQuorumVotes_: BigNumberish,
      emergencyVotingPeriod_: BigNumberish,
      emergencyTimelockDelay_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      ipt_: string,
      votingPeriod_: BigNumberish,
      votingDelay_: BigNumberish,
      proposalThreshold_: BigNumberish,
      proposalTimelockDelay_: BigNumberish,
      quorumVotes_: BigNumberish,
      emergencyQuorumVotes_: BigNumberish,
      emergencyVotingPeriod_: BigNumberish,
      emergencyTimelockDelay_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    "initialized()"(overrides?: CallOverrides): Promise<boolean>;

    ipt(overrides?: CallOverrides): Promise<string>;

    "ipt()"(overrides?: CallOverrides): Promise<string>;

    isWhitelisted(account: string, overrides?: CallOverrides): Promise<boolean>;

    "isWhitelisted(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    latestProposalIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "latestProposalIds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalMaxOperations(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalMaxOperations()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalReceipts(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, BigNumber] & {
        hasVoted: boolean;
        support: number;
        votes: BigNumber;
      }
    >;

    "proposalReceipts(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, BigNumber] & {
        hasVoted: boolean;
        support: number;
        votes: BigNumber;
      }
    >;

    proposalThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalTimelockDelay(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalTimelockDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        proposer: string;
        eta: BigNumber;
        startBlock: BigNumber;
        endBlock: BigNumber;
        forVotes: BigNumber;
        againstVotes: BigNumber;
        abstainVotes: BigNumber;
        canceled: boolean;
        executed: boolean;
        emergency: boolean;
        quorumVotes: BigNumber;
        delay: BigNumber;
      }
    >;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        proposer: string;
        eta: BigNumber;
        startBlock: BigNumber;
        endBlock: BigNumber;
        forVotes: BigNumber;
        againstVotes: BigNumber;
        abstainVotes: BigNumber;
        canceled: boolean;
        executed: boolean;
        emergency: boolean;
        quorumVotes: BigNumber;
        delay: BigNumber;
      }
    >;

    propose(
      targets: string[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      emergency: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "propose(address[],uint256[],string[],bytes[],string,bool)"(
      targets: string[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      emergency: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queue(proposalId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "queue(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    queuedTransactions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "queuedTransactions(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    quorumVotes(overrides?: CallOverrides): Promise<BigNumber>;

    "quorumVotes()"(overrides?: CallOverrides): Promise<BigNumber>;

    state(proposalId: BigNumberish, overrides?: CallOverrides): Promise<number>;

    "state(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    votingDelay(overrides?: CallOverrides): Promise<BigNumber>;

    "votingDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "votingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistAccountExpirations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "whitelistAccountExpirations(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistGuardian(overrides?: CallOverrides): Promise<string>;

    "whitelistGuardian()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "CancelTransaction(bytes32,address,uint256,string,bytes,uint256)"(
      txHash?: BytesLike | null,
      target?: string | null,
      value?: null,
      signature?: null,
      data?: null,
      eta?: null
    ): CancelTransactionEventFilter;
    CancelTransaction(
      txHash?: BytesLike | null,
      target?: string | null,
      value?: null,
      signature?: null,
      data?: null,
      eta?: null
    ): CancelTransactionEventFilter;

    "EmergencyVotingPeriodSet(uint256,uint256)"(
      oldEmergencyVotingPeriod?: null,
      emergencyVotingPeriod?: null
    ): EmergencyVotingPeriodSetEventFilter;
    EmergencyVotingPeriodSet(
      oldEmergencyVotingPeriod?: null,
      emergencyVotingPeriod?: null
    ): EmergencyVotingPeriodSetEventFilter;

    "ExecuteTransaction(bytes32,address,uint256,string,bytes,uint256)"(
      txHash?: BytesLike | null,
      target?: string | null,
      value?: null,
      signature?: null,
      data?: null,
      eta?: null
    ): ExecuteTransactionEventFilter;
    ExecuteTransaction(
      txHash?: BytesLike | null,
      target?: string | null,
      value?: null,
      signature?: null,
      data?: null,
      eta?: null
    ): ExecuteTransactionEventFilter;

    "NewAdmin(address,address)"(
      oldAdmin?: null,
      newAdmin?: null
    ): NewAdminEventFilter;
    NewAdmin(oldAdmin?: null, newAdmin?: null): NewAdminEventFilter;

    "NewDelay(uint256,uint256)"(
      oldTimelockDelay?: null,
      proposalTimelockDelay?: null
    ): NewDelayEventFilter;
    NewDelay(
      oldTimelockDelay?: null,
      proposalTimelockDelay?: null
    ): NewDelayEventFilter;

    "NewEmergencyDelay(uint256,uint256)"(
      oldEmergencyTimelockDelay?: null,
      emergencyTimelockDelay?: null
    ): NewEmergencyDelayEventFilter;
    NewEmergencyDelay(
      oldEmergencyTimelockDelay?: null,
      emergencyTimelockDelay?: null
    ): NewEmergencyDelayEventFilter;

    "NewEmergencyQuorum(uint256,uint256)"(
      oldEmergencyQuorumVotes?: null,
      emergencyQuorumVotes?: null
    ): NewEmergencyQuorumEventFilter;
    NewEmergencyQuorum(
      oldEmergencyQuorumVotes?: null,
      emergencyQuorumVotes?: null
    ): NewEmergencyQuorumEventFilter;

    "NewImplementation(address,address)"(
      oldImplementation?: null,
      newImplementation?: null
    ): NewImplementationEventFilter;
    NewImplementation(
      oldImplementation?: null,
      newImplementation?: null
    ): NewImplementationEventFilter;

    "NewPendingAdmin(address,address)"(
      oldPendingAdmin?: null,
      newPendingAdmin?: null
    ): NewPendingAdminEventFilter;
    NewPendingAdmin(
      oldPendingAdmin?: null,
      newPendingAdmin?: null
    ): NewPendingAdminEventFilter;

    "NewQuorum(uint256,uint256)"(
      oldQuorumVotes?: null,
      quorumVotes?: null
    ): NewQuorumEventFilter;
    NewQuorum(oldQuorumVotes?: null, quorumVotes?: null): NewQuorumEventFilter;

    "ProposalCanceled(uint256)"(
      id?: BigNumberish | null
    ): ProposalCanceledEventFilter;
    ProposalCanceled(id?: BigNumberish | null): ProposalCanceledEventFilter;

    "ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)"(
      id?: BigNumberish | null,
      proposer?: string | null,
      targets?: null,
      values?: null,
      signatures?: null,
      calldatas?: null,
      startBlock?: BigNumberish | null,
      endBlock?: null,
      description?: null
    ): ProposalCreatedEventFilter;
    ProposalCreated(
      id?: BigNumberish | null,
      proposer?: string | null,
      targets?: null,
      values?: null,
      signatures?: null,
      calldatas?: null,
      startBlock?: BigNumberish | null,
      endBlock?: null,
      description?: null
    ): ProposalCreatedEventFilter;

    "ProposalExecuted(uint256)"(
      id?: BigNumberish | null
    ): ProposalExecutedEventFilter;
    ProposalExecuted(id?: BigNumberish | null): ProposalExecutedEventFilter;

    "ProposalQueued(uint256,uint256)"(
      id?: BigNumberish | null,
      eta?: null
    ): ProposalQueuedEventFilter;
    ProposalQueued(
      id?: BigNumberish | null,
      eta?: null
    ): ProposalQueuedEventFilter;

    "ProposalThresholdSet(uint256,uint256)"(
      oldProposalThreshold?: null,
      newProposalThreshold?: null
    ): ProposalThresholdSetEventFilter;
    ProposalThresholdSet(
      oldProposalThreshold?: null,
      newProposalThreshold?: null
    ): ProposalThresholdSetEventFilter;

    "QueueTransaction(bytes32,address,uint256,string,bytes,uint256)"(
      txHash?: BytesLike | null,
      target?: string | null,
      value?: null,
      signature?: null,
      data?: null,
      eta?: null
    ): QueueTransactionEventFilter;
    QueueTransaction(
      txHash?: BytesLike | null,
      target?: string | null,
      value?: null,
      signature?: null,
      data?: null,
      eta?: null
    ): QueueTransactionEventFilter;

    "VoteCast(address,uint256,uint8,uint256,string)"(
      voter?: string | null,
      proposalId?: BigNumberish | null,
      support?: null,
      votes?: null,
      reason?: null
    ): VoteCastEventFilter;
    VoteCast(
      voter?: string | null,
      proposalId?: BigNumberish | null,
      support?: null,
      votes?: null,
      reason?: null
    ): VoteCastEventFilter;

    "VotingDelaySet(uint256,uint256)"(
      oldVotingDelay?: null,
      newVotingDelay?: null
    ): VotingDelaySetEventFilter;
    VotingDelaySet(
      oldVotingDelay?: null,
      newVotingDelay?: null
    ): VotingDelaySetEventFilter;

    "VotingPeriodSet(uint256,uint256)"(
      oldVotingPeriod?: null,
      newVotingPeriod?: null
    ): VotingPeriodSetEventFilter;
    VotingPeriodSet(
      oldVotingPeriod?: null,
      newVotingPeriod?: null
    ): VotingPeriodSetEventFilter;

    "WhitelistAccountExpirationSet(address,uint256)"(
      account?: null,
      expiration?: null
    ): WhitelistAccountExpirationSetEventFilter;
    WhitelistAccountExpirationSet(
      account?: null,
      expiration?: null
    ): WhitelistAccountExpirationSetEventFilter;

    "WhitelistGuardianSet(address,address)"(
      oldGuardian?: null,
      newGuardian?: null
    ): WhitelistGuardianSetEventFilter;
    WhitelistGuardianSet(
      oldGuardian?: null,
      newGuardian?: null
    ): WhitelistGuardianSetEventFilter;
  };

  estimateGas: {
    BALLOT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "BALLOT_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "DOMAIN_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    "GRACE_PERIOD()"(overrides?: CallOverrides): Promise<BigNumber>;

    _setDelay(
      proposalTimelockDelay_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "_setDelay(uint256)"(
      proposalTimelockDelay_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _setEmergencyDelay(
      emergencyTimelockDelay_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "_setEmergencyDelay(uint256)"(
      emergencyTimelockDelay_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _setEmergencyQuorumVotes(
      newEmergencyQuorumVotes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "_setEmergencyQuorumVotes(uint256)"(
      newEmergencyQuorumVotes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _setEmergencyVotingPeriod(
      newEmergencyVotingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "_setEmergencyVotingPeriod(uint256)"(
      newEmergencyVotingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _setProposalThreshold(
      newProposalThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "_setProposalThreshold(uint256)"(
      newProposalThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _setQuorumVotes(
      newQuorumVotes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "_setQuorumVotes(uint256)"(
      newQuorumVotes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _setVotingDelay(
      newVotingDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "_setVotingDelay(uint256)"(
      newVotingDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _setVotingPeriod(
      newVotingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "_setVotingPeriod(uint256)"(
      newVotingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _setWhitelistAccountExpiration(
      account: string,
      expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "_setWhitelistAccountExpiration(address,uint256)"(
      account: string,
      expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _setWhitelistGuardian(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "_setWhitelistGuardian(address)"(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancel(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "cancel(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    castVote(
      proposalId: BigNumberish,
      support: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "castVote(uint256,uint8)"(
      proposalId: BigNumberish,
      support: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    castVoteBySig(
      proposalId: BigNumberish,
      support: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)"(
      proposalId: BigNumberish,
      support: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    castVoteWithReason(
      proposalId: BigNumberish,
      support: BigNumberish,
      reason: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "castVoteWithReason(uint256,uint8,string)"(
      proposalId: BigNumberish,
      support: BigNumberish,
      reason: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyQuorumVotes(overrides?: CallOverrides): Promise<BigNumber>;

    "emergencyQuorumVotes()"(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyTimelockDelay(overrides?: CallOverrides): Promise<BigNumber>;

    "emergencyTimelockDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyVotingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "emergencyVotingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      proposalId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "execute(uint256)"(
      proposalId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeTransaction(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      eta: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "executeTransaction(address,uint256,string,bytes,uint256)"(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      eta: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getActions(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getActions(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getReceipt(uint256,address)"(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<BigNumber>;

    "implementation()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialProposalId(overrides?: CallOverrides): Promise<BigNumber>;

    "initialProposalId()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      ipt_: string,
      votingPeriod_: BigNumberish,
      votingDelay_: BigNumberish,
      proposalThreshold_: BigNumberish,
      proposalTimelockDelay_: BigNumberish,
      quorumVotes_: BigNumberish,
      emergencyQuorumVotes_: BigNumberish,
      emergencyVotingPeriod_: BigNumberish,
      emergencyTimelockDelay_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      ipt_: string,
      votingPeriod_: BigNumberish,
      votingDelay_: BigNumberish,
      proposalThreshold_: BigNumberish,
      proposalTimelockDelay_: BigNumberish,
      quorumVotes_: BigNumberish,
      emergencyQuorumVotes_: BigNumberish,
      emergencyVotingPeriod_: BigNumberish,
      emergencyTimelockDelay_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    "initialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    ipt(overrides?: CallOverrides): Promise<BigNumber>;

    "ipt()"(overrides?: CallOverrides): Promise<BigNumber>;

    isWhitelisted(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isWhitelisted(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestProposalIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "latestProposalIds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalMaxOperations(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalMaxOperations()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalReceipts(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proposalReceipts(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposalThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalTimelockDelay(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalTimelockDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    propose(
      targets: string[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      emergency: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "propose(address[],uint256[],string[],bytes[],string,bool)"(
      targets: string[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      emergency: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    queue(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "queue(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    queuedTransactions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "queuedTransactions(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quorumVotes(overrides?: CallOverrides): Promise<BigNumber>;

    "quorumVotes()"(overrides?: CallOverrides): Promise<BigNumber>;

    state(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "state(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votingDelay(overrides?: CallOverrides): Promise<BigNumber>;

    "votingDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "votingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistAccountExpirations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "whitelistAccountExpirations(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistGuardian(overrides?: CallOverrides): Promise<BigNumber>;

    "whitelistGuardian()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BALLOT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "BALLOT_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DOMAIN_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GRACE_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "GRACE_PERIOD()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _setDelay(
      proposalTimelockDelay_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "_setDelay(uint256)"(
      proposalTimelockDelay_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _setEmergencyDelay(
      emergencyTimelockDelay_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "_setEmergencyDelay(uint256)"(
      emergencyTimelockDelay_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _setEmergencyQuorumVotes(
      newEmergencyQuorumVotes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "_setEmergencyQuorumVotes(uint256)"(
      newEmergencyQuorumVotes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _setEmergencyVotingPeriod(
      newEmergencyVotingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "_setEmergencyVotingPeriod(uint256)"(
      newEmergencyVotingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _setProposalThreshold(
      newProposalThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "_setProposalThreshold(uint256)"(
      newProposalThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _setQuorumVotes(
      newQuorumVotes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "_setQuorumVotes(uint256)"(
      newQuorumVotes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _setVotingDelay(
      newVotingDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "_setVotingDelay(uint256)"(
      newVotingDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _setVotingPeriod(
      newVotingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "_setVotingPeriod(uint256)"(
      newVotingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _setWhitelistAccountExpiration(
      account: string,
      expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "_setWhitelistAccountExpiration(address,uint256)"(
      account: string,
      expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _setWhitelistGuardian(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "_setWhitelistGuardian(address)"(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancel(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "cancel(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    castVote(
      proposalId: BigNumberish,
      support: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "castVote(uint256,uint8)"(
      proposalId: BigNumberish,
      support: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    castVoteBySig(
      proposalId: BigNumberish,
      support: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)"(
      proposalId: BigNumberish,
      support: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    castVoteWithReason(
      proposalId: BigNumberish,
      support: BigNumberish,
      reason: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "castVoteWithReason(uint256,uint8,string)"(
      proposalId: BigNumberish,
      support: BigNumberish,
      reason: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyQuorumVotes(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "emergencyQuorumVotes()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyTimelockDelay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "emergencyTimelockDelay()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyVotingPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "emergencyVotingPeriod()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    execute(
      proposalId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "execute(uint256)"(
      proposalId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeTransaction(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      eta: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "executeTransaction(address,uint256,string,bytes,uint256)"(
      target: string,
      value: BigNumberish,
      signature: string,
      data: BytesLike,
      eta: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getActions(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getActions(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReceipt(uint256,address)"(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "implementation()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialProposalId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "initialProposalId()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      ipt_: string,
      votingPeriod_: BigNumberish,
      votingDelay_: BigNumberish,
      proposalThreshold_: BigNumberish,
      proposalTimelockDelay_: BigNumberish,
      quorumVotes_: BigNumberish,
      emergencyQuorumVotes_: BigNumberish,
      emergencyVotingPeriod_: BigNumberish,
      emergencyTimelockDelay_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      ipt_: string,
      votingPeriod_: BigNumberish,
      votingDelay_: BigNumberish,
      proposalThreshold_: BigNumberish,
      proposalTimelockDelay_: BigNumberish,
      quorumVotes_: BigNumberish,
      emergencyQuorumVotes_: BigNumberish,
      emergencyVotingPeriod_: BigNumberish,
      emergencyTimelockDelay_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "initialized()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ipt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ipt()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isWhitelisted(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isWhitelisted(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestProposalIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "latestProposalIds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proposalCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalMaxOperations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proposalMaxOperations()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalReceipts(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proposalReceipts(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proposalThreshold()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalTimelockDelay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proposalTimelockDelay()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    propose(
      targets: string[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      emergency: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "propose(address[],uint256[],string[],bytes[],string,bool)"(
      targets: string[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      emergency: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    queue(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "queue(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    queuedTransactions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "queuedTransactions(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quorumVotes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "quorumVotes()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    state(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "state(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votingDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "votingDelay()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "votingPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistAccountExpirations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "whitelistAccountExpirations(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistGuardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "whitelistGuardian()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
