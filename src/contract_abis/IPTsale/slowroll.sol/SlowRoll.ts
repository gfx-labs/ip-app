/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface SlowRollInterface extends utils.Interface {
  functions: {
    "_endTime()": FunctionFragment;
    "_maxPrice()": FunctionFragment;
    "_maxQuantity()": FunctionFragment;
    "_owner()": FunctionFragment;
    "_pointsToken()": FunctionFragment;
    "_rewardToken()": FunctionFragment;
    "_soldQuantity()": FunctionFragment;
    "_startPrice()": FunctionFragment;
    "_waveDuration()": FunctionFragment;
    "forceNewDay()": FunctionFragment;
    "getCurrentPrice()": FunctionFragment;
    "getPoints(uint256)": FunctionFragment;
    "setMaxPrice(uint64)": FunctionFragment;
    "setMaxQuantity(uint256)": FunctionFragment;
    "setStartPrice(uint64)": FunctionFragment;
    "setWaveDuration(uint64)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_endTime"
      | "_endTime()"
      | "_maxPrice"
      | "_maxPrice()"
      | "_maxQuantity"
      | "_maxQuantity()"
      | "_owner"
      | "_owner()"
      | "_pointsToken"
      | "_pointsToken()"
      | "_rewardToken"
      | "_rewardToken()"
      | "_soldQuantity"
      | "_soldQuantity()"
      | "_startPrice"
      | "_startPrice()"
      | "_waveDuration"
      | "_waveDuration()"
      | "forceNewDay"
      | "forceNewDay()"
      | "getCurrentPrice"
      | "getCurrentPrice()"
      | "getPoints"
      | "getPoints(uint256)"
      | "setMaxPrice"
      | "setMaxPrice(uint64)"
      | "setMaxQuantity"
      | "setMaxQuantity(uint256)"
      | "setStartPrice"
      | "setStartPrice(uint64)"
      | "setWaveDuration"
      | "setWaveDuration(uint64)"
      | "withdraw"
      | "withdraw(uint256)"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "_endTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_endTime()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_maxPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_maxPrice()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_maxQuantity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_maxQuantity()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "_owner()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_pointsToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_pointsToken()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_rewardToken()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_soldQuantity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_soldQuantity()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_startPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_startPrice()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_waveDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_waveDuration()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceNewDay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceNewDay()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPrice()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoints",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoints(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPrice(uint64)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxQuantity",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxQuantity(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStartPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStartPrice(uint64)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWaveDuration",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWaveDuration(uint64)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "_endTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_endTime()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_maxPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_maxPrice()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_maxQuantity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_maxQuantity()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_owner()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_pointsToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_pointsToken()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_rewardToken()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_soldQuantity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_soldQuantity()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_startPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_startPrice()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_waveDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_waveDuration()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceNewDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceNewDay()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPrice()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPoints", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoints(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPrice(uint64)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxQuantity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxQuantity(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStartPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStartPrice(uint64)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWaveDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWaveDuration(uint64)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(uint256)",
    data: BytesLike
  ): Result;

  events: {};
}

export interface SlowRoll extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SlowRollInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _endTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_endTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _maxPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_maxPrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _maxQuantity(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_maxQuantity()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _owner(overrides?: CallOverrides): Promise<[string]>;

    "_owner()"(overrides?: CallOverrides): Promise<[string]>;

    _pointsToken(overrides?: CallOverrides): Promise<[string]>;

    "_pointsToken()"(overrides?: CallOverrides): Promise<[string]>;

    _rewardToken(overrides?: CallOverrides): Promise<[string]>;

    "_rewardToken()"(overrides?: CallOverrides): Promise<[string]>;

    _soldQuantity(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_soldQuantity()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _startPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_startPrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _waveDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_waveDuration()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    forceNewDay(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "forceNewDay()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCurrentPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getCurrentPrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPoints(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "getPoints(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxPrice(
      maxPrice_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setMaxPrice(uint64)"(
      maxPrice_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxQuantity(
      maxQuantity_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setMaxQuantity(uint256)"(
      maxQuantity_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStartPrice(
      startPrice_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setStartPrice(uint64)"(
      startPrice_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWaveDuration(
      waveDuration_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setWaveDuration(uint64)"(
      waveDuration_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _endTime(overrides?: CallOverrides): Promise<BigNumber>;

  "_endTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  _maxPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "_maxPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  _maxQuantity(overrides?: CallOverrides): Promise<BigNumber>;

  "_maxQuantity()"(overrides?: CallOverrides): Promise<BigNumber>;

  _owner(overrides?: CallOverrides): Promise<string>;

  "_owner()"(overrides?: CallOverrides): Promise<string>;

  _pointsToken(overrides?: CallOverrides): Promise<string>;

  "_pointsToken()"(overrides?: CallOverrides): Promise<string>;

  _rewardToken(overrides?: CallOverrides): Promise<string>;

  "_rewardToken()"(overrides?: CallOverrides): Promise<string>;

  _soldQuantity(overrides?: CallOverrides): Promise<BigNumber>;

  "_soldQuantity()"(overrides?: CallOverrides): Promise<BigNumber>;

  _startPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "_startPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  _waveDuration(overrides?: CallOverrides): Promise<BigNumber>;

  "_waveDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

  forceNewDay(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "forceNewDay()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "getCurrentPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  getPoints(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "getPoints(uint256)"(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxPrice(
    maxPrice_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setMaxPrice(uint64)"(
    maxPrice_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxQuantity(
    maxQuantity_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setMaxQuantity(uint256)"(
    maxQuantity_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStartPrice(
    startPrice_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setStartPrice(uint64)"(
    startPrice_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWaveDuration(
    waveDuration_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setWaveDuration(uint64)"(
    waveDuration_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _endTime(overrides?: CallOverrides): Promise<BigNumber>;

    "_endTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    _maxPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "_maxPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    _maxQuantity(overrides?: CallOverrides): Promise<BigNumber>;

    "_maxQuantity()"(overrides?: CallOverrides): Promise<BigNumber>;

    _owner(overrides?: CallOverrides): Promise<string>;

    "_owner()"(overrides?: CallOverrides): Promise<string>;

    _pointsToken(overrides?: CallOverrides): Promise<string>;

    "_pointsToken()"(overrides?: CallOverrides): Promise<string>;

    _rewardToken(overrides?: CallOverrides): Promise<string>;

    "_rewardToken()"(overrides?: CallOverrides): Promise<string>;

    _soldQuantity(overrides?: CallOverrides): Promise<BigNumber>;

    "_soldQuantity()"(overrides?: CallOverrides): Promise<BigNumber>;

    _startPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "_startPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    _waveDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "_waveDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    forceNewDay(overrides?: CallOverrides): Promise<void>;

    "forceNewDay()"(overrides?: CallOverrides): Promise<void>;

    getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPoints(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "getPoints(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPrice(
      maxPrice_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxPrice(uint64)"(
      maxPrice_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxQuantity(
      maxQuantity_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxQuantity(uint256)"(
      maxQuantity_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStartPrice(
      startPrice_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setStartPrice(uint64)"(
      startPrice_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWaveDuration(
      waveDuration_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setWaveDuration(uint64)"(
      waveDuration_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    _endTime(overrides?: CallOverrides): Promise<BigNumber>;

    "_endTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    _maxPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "_maxPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    _maxQuantity(overrides?: CallOverrides): Promise<BigNumber>;

    "_maxQuantity()"(overrides?: CallOverrides): Promise<BigNumber>;

    _owner(overrides?: CallOverrides): Promise<BigNumber>;

    "_owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    _pointsToken(overrides?: CallOverrides): Promise<BigNumber>;

    "_pointsToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    _rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    "_rewardToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    _soldQuantity(overrides?: CallOverrides): Promise<BigNumber>;

    "_soldQuantity()"(overrides?: CallOverrides): Promise<BigNumber>;

    _startPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "_startPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    _waveDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "_waveDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    forceNewDay(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "forceNewDay()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPoints(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "getPoints(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxPrice(
      maxPrice_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setMaxPrice(uint64)"(
      maxPrice_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxQuantity(
      maxQuantity_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setMaxQuantity(uint256)"(
      maxQuantity_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStartPrice(
      startPrice_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setStartPrice(uint64)"(
      startPrice_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWaveDuration(
      waveDuration_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setWaveDuration(uint64)"(
      waveDuration_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdraw(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _endTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_endTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _maxPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_maxPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _maxQuantity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_maxQuantity()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _pointsToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_pointsToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_rewardToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _soldQuantity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_soldQuantity()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _startPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_startPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _waveDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_waveDuration()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forceNewDay(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "forceNewDay()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getCurrentPrice()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoints(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "getPoints(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPrice(
      maxPrice_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setMaxPrice(uint64)"(
      maxPrice_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxQuantity(
      maxQuantity_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setMaxQuantity(uint256)"(
      maxQuantity_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStartPrice(
      startPrice_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setStartPrice(uint64)"(
      startPrice_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWaveDuration(
      waveDuration_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setWaveDuration(uint64)"(
      waveDuration_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
