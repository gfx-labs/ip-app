/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface WavePoolInterface extends utils.Interface {
  functions: {
    "_cap()": FunctionFragment;
    "_claimTime()": FunctionFragment;
    "_data(uint256,address)": FunctionFragment;
    "_floor()": FunctionFragment;
    "_metadata(uint256)": FunctionFragment;
    "_pointsToken()": FunctionFragment;
    "_receiver()": FunctionFragment;
    "_rewardToken()": FunctionFragment;
    "_totalClaimed()": FunctionFragment;
    "_totalReward()": FunctionFragment;
    "calculated()": FunctionFragment;
    "canClaim()": FunctionFragment;
    "canRedeem()": FunctionFragment;
    "getPoints(uint256,uint256,uint256,bytes32[])": FunctionFragment;
    "impliedPrice()": FunctionFragment;
    "isEnabled(uint256)": FunctionFragment;
    "redeem(uint256)": FunctionFragment;
    "saturation()": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_cap"
      | "_cap()"
      | "_claimTime"
      | "_claimTime()"
      | "_data"
      | "_data(uint256,address)"
      | "_floor"
      | "_floor()"
      | "_metadata"
      | "_metadata(uint256)"
      | "_pointsToken"
      | "_pointsToken()"
      | "_receiver"
      | "_receiver()"
      | "_rewardToken"
      | "_rewardToken()"
      | "_totalClaimed"
      | "_totalClaimed()"
      | "_totalReward"
      | "_totalReward()"
      | "calculated"
      | "calculated()"
      | "canClaim"
      | "canClaim()"
      | "canRedeem"
      | "canRedeem()"
      | "getPoints"
      | "getPoints(uint256,uint256,uint256,bytes32[])"
      | "impliedPrice"
      | "impliedPrice()"
      | "isEnabled"
      | "isEnabled(uint256)"
      | "redeem"
      | "redeem(uint256)"
      | "saturation"
      | "saturation()"
      | "withdraw"
      | "withdraw()"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "_cap", values?: undefined): string;
  encodeFunctionData(functionFragment: "_cap()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_claimTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_claimTime()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_data",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "_data(uint256,address)",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "_floor", values?: undefined): string;
  encodeFunctionData(functionFragment: "_floor()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_metadata",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_metadata(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_pointsToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_pointsToken()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_receiver", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_receiver()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_rewardToken()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_totalClaimed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_totalClaimed()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_totalReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_totalReward()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculated()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "canClaim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "canClaim()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "canRedeem", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "canRedeem()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoints",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoints(uint256,uint256,uint256,bytes32[])",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "impliedPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "impliedPrice()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isEnabled",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isEnabled(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "saturation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "saturation()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw()",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "_cap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_cap()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_claimTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_claimTime()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_data", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_data(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_floor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_floor()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_metadata", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_metadata(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_pointsToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_pointsToken()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_receiver", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_receiver()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_rewardToken()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_totalClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_totalClaimed()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_totalReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_totalReward()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "calculated", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculated()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canClaim()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canRedeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canRedeem()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPoints", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoints(uint256,uint256,uint256,bytes32[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "impliedPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "impliedPrice()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isEnabled", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isEnabled(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeem(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "saturation", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "saturation()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw()", data: BytesLike): Result;

  events: {
    "Points(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Points"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Points(address,uint256,uint256)"
  ): EventFragment;
}

export interface PointsEventObject {
  from: string;
  wave: BigNumber;
  amount: BigNumber;
}
export type PointsEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  PointsEventObject
>;

export type PointsEventFilter = TypedEventFilter<PointsEvent>;

export interface WavePool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WavePoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _cap(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_cap()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _claimTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_claimTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _data(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { claimed: BigNumber; redeemed: boolean }
    >;

    "_data(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { claimed: BigNumber; redeemed: boolean }
    >;

    _floor(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_floor()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _metadata(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber] & {
        enabled: boolean;
        merkleRoot: string;
        enableTime: BigNumber;
      }
    >;

    "_metadata(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber] & {
        enabled: boolean;
        merkleRoot: string;
        enableTime: BigNumber;
      }
    >;

    _pointsToken(overrides?: CallOverrides): Promise<[string]>;

    "_pointsToken()"(overrides?: CallOverrides): Promise<[string]>;

    _receiver(overrides?: CallOverrides): Promise<[string]>;

    "_receiver()"(overrides?: CallOverrides): Promise<[string]>;

    _rewardToken(overrides?: CallOverrides): Promise<[string]>;

    "_rewardToken()"(overrides?: CallOverrides): Promise<[string]>;

    _totalClaimed(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_totalClaimed()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _totalReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_totalReward()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculated(overrides?: CallOverrides): Promise<[boolean]>;

    "calculated()"(overrides?: CallOverrides): Promise<[boolean]>;

    canClaim(overrides?: CallOverrides): Promise<[boolean]>;

    "canClaim()"(overrides?: CallOverrides): Promise<[boolean]>;

    canRedeem(overrides?: CallOverrides): Promise<[boolean]>;

    "canRedeem()"(overrides?: CallOverrides): Promise<[boolean]>;

    getPoints(
      wave: BigNumberish,
      amount: BigNumberish,
      key: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "getPoints(uint256,uint256,uint256,bytes32[])"(
      wave: BigNumberish,
      amount: BigNumberish,
      key: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    impliedPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "impliedPrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    isEnabled(
      wave: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isEnabled(uint256)"(
      wave: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    redeem(
      wave: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "redeem(uint256)"(
      wave: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    saturation(overrides?: CallOverrides): Promise<[boolean]>;

    "saturation()"(overrides?: CallOverrides): Promise<[boolean]>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _cap(overrides?: CallOverrides): Promise<BigNumber>;

  "_cap()"(overrides?: CallOverrides): Promise<BigNumber>;

  _claimTime(overrides?: CallOverrides): Promise<BigNumber>;

  "_claimTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  _data(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { claimed: BigNumber; redeemed: boolean }>;

  "_data(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { claimed: BigNumber; redeemed: boolean }>;

  _floor(overrides?: CallOverrides): Promise<BigNumber>;

  "_floor()"(overrides?: CallOverrides): Promise<BigNumber>;

  _metadata(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, BigNumber] & {
      enabled: boolean;
      merkleRoot: string;
      enableTime: BigNumber;
    }
  >;

  "_metadata(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, BigNumber] & {
      enabled: boolean;
      merkleRoot: string;
      enableTime: BigNumber;
    }
  >;

  _pointsToken(overrides?: CallOverrides): Promise<string>;

  "_pointsToken()"(overrides?: CallOverrides): Promise<string>;

  _receiver(overrides?: CallOverrides): Promise<string>;

  "_receiver()"(overrides?: CallOverrides): Promise<string>;

  _rewardToken(overrides?: CallOverrides): Promise<string>;

  "_rewardToken()"(overrides?: CallOverrides): Promise<string>;

  _totalClaimed(overrides?: CallOverrides): Promise<BigNumber>;

  "_totalClaimed()"(overrides?: CallOverrides): Promise<BigNumber>;

  _totalReward(overrides?: CallOverrides): Promise<BigNumber>;

  "_totalReward()"(overrides?: CallOverrides): Promise<BigNumber>;

  calculated(overrides?: CallOverrides): Promise<boolean>;

  "calculated()"(overrides?: CallOverrides): Promise<boolean>;

  canClaim(overrides?: CallOverrides): Promise<boolean>;

  "canClaim()"(overrides?: CallOverrides): Promise<boolean>;

  canRedeem(overrides?: CallOverrides): Promise<boolean>;

  "canRedeem()"(overrides?: CallOverrides): Promise<boolean>;

  getPoints(
    wave: BigNumberish,
    amount: BigNumberish,
    key: BigNumberish,
    merkleProof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "getPoints(uint256,uint256,uint256,bytes32[])"(
    wave: BigNumberish,
    amount: BigNumberish,
    key: BigNumberish,
    merkleProof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  impliedPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "impliedPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  isEnabled(wave: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "isEnabled(uint256)"(
    wave: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  redeem(
    wave: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "redeem(uint256)"(
    wave: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  saturation(overrides?: CallOverrides): Promise<boolean>;

  "saturation()"(overrides?: CallOverrides): Promise<boolean>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _cap(overrides?: CallOverrides): Promise<BigNumber>;

    "_cap()"(overrides?: CallOverrides): Promise<BigNumber>;

    _claimTime(overrides?: CallOverrides): Promise<BigNumber>;

    "_claimTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    _data(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { claimed: BigNumber; redeemed: boolean }
    >;

    "_data(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { claimed: BigNumber; redeemed: boolean }
    >;

    _floor(overrides?: CallOverrides): Promise<BigNumber>;

    "_floor()"(overrides?: CallOverrides): Promise<BigNumber>;

    _metadata(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber] & {
        enabled: boolean;
        merkleRoot: string;
        enableTime: BigNumber;
      }
    >;

    "_metadata(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber] & {
        enabled: boolean;
        merkleRoot: string;
        enableTime: BigNumber;
      }
    >;

    _pointsToken(overrides?: CallOverrides): Promise<string>;

    "_pointsToken()"(overrides?: CallOverrides): Promise<string>;

    _receiver(overrides?: CallOverrides): Promise<string>;

    "_receiver()"(overrides?: CallOverrides): Promise<string>;

    _rewardToken(overrides?: CallOverrides): Promise<string>;

    "_rewardToken()"(overrides?: CallOverrides): Promise<string>;

    _totalClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    "_totalClaimed()"(overrides?: CallOverrides): Promise<BigNumber>;

    _totalReward(overrides?: CallOverrides): Promise<BigNumber>;

    "_totalReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    calculated(overrides?: CallOverrides): Promise<boolean>;

    "calculated()"(overrides?: CallOverrides): Promise<boolean>;

    canClaim(overrides?: CallOverrides): Promise<boolean>;

    "canClaim()"(overrides?: CallOverrides): Promise<boolean>;

    canRedeem(overrides?: CallOverrides): Promise<boolean>;

    "canRedeem()"(overrides?: CallOverrides): Promise<boolean>;

    getPoints(
      wave: BigNumberish,
      amount: BigNumberish,
      key: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "getPoints(uint256,uint256,uint256,bytes32[])"(
      wave: BigNumberish,
      amount: BigNumberish,
      key: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    impliedPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "impliedPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    isEnabled(wave: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "isEnabled(uint256)"(
      wave: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    redeem(wave: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "redeem(uint256)"(
      wave: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    saturation(overrides?: CallOverrides): Promise<boolean>;

    "saturation()"(overrides?: CallOverrides): Promise<boolean>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    "withdraw()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Points(address,uint256,uint256)"(
      from?: string | null,
      wave?: null,
      amount?: null
    ): PointsEventFilter;
    Points(from?: string | null, wave?: null, amount?: null): PointsEventFilter;
  };

  estimateGas: {
    _cap(overrides?: CallOverrides): Promise<BigNumber>;

    "_cap()"(overrides?: CallOverrides): Promise<BigNumber>;

    _claimTime(overrides?: CallOverrides): Promise<BigNumber>;

    "_claimTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    _data(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_data(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _floor(overrides?: CallOverrides): Promise<BigNumber>;

    "_floor()"(overrides?: CallOverrides): Promise<BigNumber>;

    _metadata(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_metadata(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _pointsToken(overrides?: CallOverrides): Promise<BigNumber>;

    "_pointsToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    _receiver(overrides?: CallOverrides): Promise<BigNumber>;

    "_receiver()"(overrides?: CallOverrides): Promise<BigNumber>;

    _rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    "_rewardToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    _totalClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    "_totalClaimed()"(overrides?: CallOverrides): Promise<BigNumber>;

    _totalReward(overrides?: CallOverrides): Promise<BigNumber>;

    "_totalReward()"(overrides?: CallOverrides): Promise<BigNumber>;

    calculated(overrides?: CallOverrides): Promise<BigNumber>;

    "calculated()"(overrides?: CallOverrides): Promise<BigNumber>;

    canClaim(overrides?: CallOverrides): Promise<BigNumber>;

    "canClaim()"(overrides?: CallOverrides): Promise<BigNumber>;

    canRedeem(overrides?: CallOverrides): Promise<BigNumber>;

    "canRedeem()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPoints(
      wave: BigNumberish,
      amount: BigNumberish,
      key: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "getPoints(uint256,uint256,uint256,bytes32[])"(
      wave: BigNumberish,
      amount: BigNumberish,
      key: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    impliedPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "impliedPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    isEnabled(
      wave: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isEnabled(uint256)"(
      wave: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(
      wave: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "redeem(uint256)"(
      wave: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    saturation(overrides?: CallOverrides): Promise<BigNumber>;

    "saturation()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _cap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_cap()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _claimTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_claimTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _data(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_data(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _floor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_floor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _metadata(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_metadata(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _pointsToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_pointsToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _receiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_receiver()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_rewardToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _totalClaimed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_totalClaimed()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _totalReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_totalReward()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "calculated()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canClaim(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "canClaim()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canRedeem(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "canRedeem()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoints(
      wave: BigNumberish,
      amount: BigNumberish,
      key: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "getPoints(uint256,uint256,uint256,bytes32[])"(
      wave: BigNumberish,
      amount: BigNumberish,
      key: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    impliedPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "impliedPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isEnabled(
      wave: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isEnabled(uint256)"(
      wave: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeem(
      wave: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "redeem(uint256)"(
      wave: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    saturation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "saturation()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
