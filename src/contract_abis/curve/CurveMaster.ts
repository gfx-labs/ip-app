/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface CurveMasterInterface extends utils.Interface {
  functions: {
    "_curves(address)": FunctionFragment;
    "_paused(address)": FunctionFragment;
    "_vaultControllerAddress()": FunctionFragment;
    "getValueAt(address,int256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setCurve(address,address)": FunctionFragment;
    "setVaultController(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vaultControllerAddress()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_curves"
      | "_paused"
      | "_vaultControllerAddress"
      | "getValueAt"
      | "owner"
      | "renounceOwnership"
      | "setCurve"
      | "setVaultController"
      | "transferOwnership"
      | "vaultControllerAddress"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "_curves", values: [string]): string;
  encodeFunctionData(functionFragment: "_paused", values: [string]): string;
  encodeFunctionData(
    functionFragment: "_vaultControllerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValueAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCurve",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setVaultController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultControllerAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "_curves", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_vaultControllerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getValueAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setCurve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVaultController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultControllerAddress",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface CurveMaster extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CurveMasterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _curves(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    _paused(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    _vaultControllerAddress(overrides?: CallOverrides): Promise<[string]>;

    getValueAt(
      token_address: string,
      x_value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCurve(
      token_address: string,
      curve_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVaultController(
      vault_master_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vaultControllerAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  _curves(arg0: string, overrides?: CallOverrides): Promise<string>;

  _paused(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  _vaultControllerAddress(overrides?: CallOverrides): Promise<string>;

  getValueAt(
    token_address: string,
    x_value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCurve(
    token_address: string,
    curve_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVaultController(
    vault_master_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vaultControllerAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    _curves(arg0: string, overrides?: CallOverrides): Promise<string>;

    _paused(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    _vaultControllerAddress(overrides?: CallOverrides): Promise<string>;

    getValueAt(
      token_address: string,
      x_value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setCurve(
      token_address: string,
      curve_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setVaultController(
      vault_master_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vaultControllerAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    _curves(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    _paused(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    _vaultControllerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getValueAt(
      token_address: string,
      x_value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCurve(
      token_address: string,
      curve_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVaultController(
      vault_master_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vaultControllerAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _curves(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _paused(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _vaultControllerAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValueAt(
      token_address: string,
      x_value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCurve(
      token_address: string,
      curve_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVaultController(
      vault_master_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vaultControllerAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
