/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, Signer, utils } from 'ethers'
import type { EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../common'

export interface VaultControllerEventsInterface extends utils.Interface {
  functions: {}

  events: {
    'BorrowUSDi(uint256,address,uint256)': EventFragment
    'InterestEvent(uint64,uint192,uint256)': EventFragment
    'Liquidate(uint256,address,uint256,uint256)': EventFragment
    'NewProtocolFee(uint256)': EventFragment
    'NewVault(address,uint256,address)': EventFragment
    'RegisterCurveMaster(address)': EventFragment
    'RegisterOracleMaster(address)': EventFragment
    'RegisteredErc20(address,uint256,address,uint256)': EventFragment
    'RepayUSDi(uint256,address,uint256)': EventFragment
    'UpdateRegisteredErc20(address,uint256,address,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'BorrowUSDi'): EventFragment
  getEvent(
    nameOrSignatureOrTopic: 'BorrowUSDi(uint256,address,uint256)'
  ): EventFragment
  getEvent(nameOrSignatureOrTopic: 'InterestEvent'): EventFragment
  getEvent(
    nameOrSignatureOrTopic: 'InterestEvent(uint64,uint192,uint256)'
  ): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Liquidate'): EventFragment
  getEvent(
    nameOrSignatureOrTopic: 'Liquidate(uint256,address,uint256,uint256)'
  ): EventFragment
  getEvent(nameOrSignatureOrTopic: 'NewProtocolFee'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'NewProtocolFee(uint256)'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'NewVault'): EventFragment
  getEvent(
    nameOrSignatureOrTopic: 'NewVault(address,uint256,address)'
  ): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RegisterCurveMaster'): EventFragment
  getEvent(
    nameOrSignatureOrTopic: 'RegisterCurveMaster(address)'
  ): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RegisterOracleMaster'): EventFragment
  getEvent(
    nameOrSignatureOrTopic: 'RegisterOracleMaster(address)'
  ): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RegisteredErc20'): EventFragment
  getEvent(
    nameOrSignatureOrTopic: 'RegisteredErc20(address,uint256,address,uint256)'
  ): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RepayUSDi'): EventFragment
  getEvent(
    nameOrSignatureOrTopic: 'RepayUSDi(uint256,address,uint256)'
  ): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UpdateRegisteredErc20'): EventFragment
  getEvent(
    nameOrSignatureOrTopic: 'UpdateRegisteredErc20(address,uint256,address,uint256)'
  ): EventFragment
}

export interface BorrowUSDiEventObject {
  vaultId: BigNumber
  vaultAddress: string
  borrowAmount: BigNumber
}
export type BorrowUSDiEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  BorrowUSDiEventObject
>

export type BorrowUSDiEventFilter = TypedEventFilter<BorrowUSDiEvent>

export interface InterestEventEventObject {
  epoch: BigNumber
  amount: BigNumber
  curve_val: BigNumber
}
export type InterestEventEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  InterestEventEventObject
>

export type InterestEventEventFilter = TypedEventFilter<InterestEventEvent>

export interface LiquidateEventObject {
  vaultId: BigNumber
  asset_address: string
  usdi_to_repurchase: BigNumber
  tokens_to_liquidate: BigNumber
}
export type LiquidateEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  LiquidateEventObject
>

export type LiquidateEventFilter = TypedEventFilter<LiquidateEvent>

export interface NewProtocolFeeEventObject {
  protocol_fee: BigNumber
}
export type NewProtocolFeeEvent = TypedEvent<
  [BigNumber],
  NewProtocolFeeEventObject
>

export type NewProtocolFeeEventFilter = TypedEventFilter<NewProtocolFeeEvent>

export interface NewVaultEventObject {
  vault_address: string
  vaultId: BigNumber
  vaultOwner: string
}
export type NewVaultEvent = TypedEvent<
  [string, BigNumber, string],
  NewVaultEventObject
>

export type NewVaultEventFilter = TypedEventFilter<NewVaultEvent>

export interface RegisterCurveMasterEventObject {
  curveMasterAddress: string
}
export type RegisterCurveMasterEvent = TypedEvent<
  [string],
  RegisterCurveMasterEventObject
>

export type RegisterCurveMasterEventFilter =
  TypedEventFilter<RegisterCurveMasterEvent>

export interface RegisterOracleMasterEventObject {
  oracleMasterAddress: string
}
export type RegisterOracleMasterEvent = TypedEvent<
  [string],
  RegisterOracleMasterEventObject
>

export type RegisterOracleMasterEventFilter =
  TypedEventFilter<RegisterOracleMasterEvent>

export interface RegisteredErc20EventObject {
  token_address: string
  LTVe4: BigNumber
  oracle_address: string
  liquidationIncentivee4: BigNumber
}
export type RegisteredErc20Event = TypedEvent<
  [string, BigNumber, string, BigNumber],
  RegisteredErc20EventObject
>

export type RegisteredErc20EventFilter = TypedEventFilter<RegisteredErc20Event>

export interface RepayUSDiEventObject {
  vaultId: BigNumber
  vaultAddress: string
  repayAmount: BigNumber
}
export type RepayUSDiEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  RepayUSDiEventObject
>

export type RepayUSDiEventFilter = TypedEventFilter<RepayUSDiEvent>

export interface UpdateRegisteredErc20EventObject {
  token_address: string
  LTVe4: BigNumber
  oracle_address: string
  liquidationIncentivee4: BigNumber
}
export type UpdateRegisteredErc20Event = TypedEvent<
  [string, BigNumber, string, BigNumber],
  UpdateRegisteredErc20EventObject
>

export type UpdateRegisteredErc20EventFilter =
  TypedEventFilter<UpdateRegisteredErc20Event>

export interface VaultControllerEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: VaultControllerEventsInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {}

  callStatic: {}

  filters: {
    'BorrowUSDi(uint256,address,uint256)'(
      vaultId?: null,
      vaultAddress?: null,
      borrowAmount?: null
    ): BorrowUSDiEventFilter
    BorrowUSDi(
      vaultId?: null,
      vaultAddress?: null,
      borrowAmount?: null
    ): BorrowUSDiEventFilter

    'InterestEvent(uint64,uint192,uint256)'(
      epoch?: null,
      amount?: null,
      curve_val?: null
    ): InterestEventEventFilter
    InterestEvent(
      epoch?: null,
      amount?: null,
      curve_val?: null
    ): InterestEventEventFilter

    'Liquidate(uint256,address,uint256,uint256)'(
      vaultId?: null,
      asset_address?: null,
      usdi_to_repurchase?: null,
      tokens_to_liquidate?: null
    ): LiquidateEventFilter
    Liquidate(
      vaultId?: null,
      asset_address?: null,
      usdi_to_repurchase?: null,
      tokens_to_liquidate?: null
    ): LiquidateEventFilter

    'NewProtocolFee(uint256)'(protocol_fee?: null): NewProtocolFeeEventFilter
    NewProtocolFee(protocol_fee?: null): NewProtocolFeeEventFilter

    'NewVault(address,uint256,address)'(
      vault_address?: null,
      vaultId?: null,
      vaultOwner?: null
    ): NewVaultEventFilter
    NewVault(
      vault_address?: null,
      vaultId?: null,
      vaultOwner?: null
    ): NewVaultEventFilter

    'RegisterCurveMaster(address)'(
      curveMasterAddress?: null
    ): RegisterCurveMasterEventFilter
    RegisterCurveMaster(
      curveMasterAddress?: null
    ): RegisterCurveMasterEventFilter

    'RegisterOracleMaster(address)'(
      oracleMasterAddress?: null
    ): RegisterOracleMasterEventFilter
    RegisterOracleMaster(
      oracleMasterAddress?: null
    ): RegisterOracleMasterEventFilter

    'RegisteredErc20(address,uint256,address,uint256)'(
      token_address?: null,
      LTVe4?: null,
      oracle_address?: null,
      liquidationIncentivee4?: null
    ): RegisteredErc20EventFilter
    RegisteredErc20(
      token_address?: null,
      LTVe4?: null,
      oracle_address?: null,
      liquidationIncentivee4?: null
    ): RegisteredErc20EventFilter

    'RepayUSDi(uint256,address,uint256)'(
      vaultId?: null,
      vaultAddress?: null,
      repayAmount?: null
    ): RepayUSDiEventFilter
    RepayUSDi(
      vaultId?: null,
      vaultAddress?: null,
      repayAmount?: null
    ): RepayUSDiEventFilter

    'UpdateRegisteredErc20(address,uint256,address,uint256)'(
      token_address?: null,
      LTVe4?: null,
      oracle_address?: null,
      liquidationIncentivee4?: null
    ): UpdateRegisteredErc20EventFilter
    UpdateRegisteredErc20(
      token_address?: null,
      LTVe4?: null,
      oracle_address?: null,
      liquidationIncentivee4?: null
    ): UpdateRegisteredErc20EventFilter
  }

  estimateGas: {}

  populateTransaction: {}
}
